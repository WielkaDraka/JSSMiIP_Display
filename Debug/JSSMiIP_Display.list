
JSSMiIP_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000749c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004f4e0  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08056b4c  08056b4c  000700b0  2**0
                  CONTENTS
  4 .ARM          00000008  08056b4c  08056b4c  00066b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08056b54  08056b54  000700b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08056b54  08056b54  00066b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08056b58  08056b58  00066b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08056b5c  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200000b0  08056c0c  000700b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08056c0c  000703c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000700b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af1b  00000000  00000000  000700e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003acd  00000000  00000000  0008affb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0008eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0008ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005fb4  00000000  00000000  000911c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7ea  00000000  00000000  00097174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f67fc  00000000  00000000  000b195e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a815a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  001a81b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007654 	.word	0x08007654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08007654 	.word	0x08007654

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <lps25h_write_reg>:
  * @param  reg: register addres
  * @param	value: to be written to the registry
  * @retval None
  */
void lps25h_write_reg(uint8_t reg, uint8_t value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af04      	add	r7, sp, #16
 80005be:	4603      	mov	r3, r0
 80005c0:	460a      	mov	r2, r1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	4613      	mov	r3, r2
 80005c6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, LPS25H_H_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	2301      	movs	r3, #1
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	21ba      	movs	r1, #186	; 0xba
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <lps25h_write_reg+0x34>)
 80005e0:	f003 f8c6 	bl	8003770 <HAL_I2C_Mem_Write>

}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001ec 	.word	0x200001ec

080005f0 <lps25h_Init>:
/**
  * @brief  Initialization for the lps25h sensor
  * @retval None
  */
void lps25h_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//PD = 1 (active mode);  ODR = 011 (12.5 Hz pressure & temperature output data rate)
	lps25h_write_reg(LPS25H_CTRL_REG1, 0xB0);
 80005f4:	21b0      	movs	r1, #176	; 0xb0
 80005f6:	2020      	movs	r0, #32
 80005f8:	f7ff ffde 	bl	80005b8 <lps25h_write_reg>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <lps25h_readTemperature>:
/**
  * @brief  Reads temperature and returns raw 16-bit sensor output
  * @retval None
  */
void lps25h_readTemperature(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, LPS25H_H_ADDR, LPS25H_TEMP_OUT_L | 0x80, 1, (uint8_t*)&alititude.temperature, sizeof(alititude.Buf_t), HAL_MAX_DELAY);
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	9302      	str	r3, [sp, #8]
 800060c:	2302      	movs	r3, #2
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <lps25h_readTemperature+0x28>)
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2301      	movs	r3, #1
 8000616:	22ab      	movs	r2, #171	; 0xab
 8000618:	21ba      	movs	r1, #186	; 0xba
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <lps25h_readTemperature+0x2c>)
 800061c:	f003 f9bc 	bl	8003998 <HAL_I2C_Mem_Read>
	//HAL_I2C_Mem_Read(&hi2c1, LPS25H_H_ADDR, LPS25H_TEMP_OUT_L, 1, alititude.Buf_t, sizeof(alititude.Buf_t), HAL_MAX_DELAY);
	//alititude.temperature = (alititude.Buf_t[1]<<8) | alititude.Buf_t[0];
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001ac 	.word	0x200001ac
 800062c:	200001ec 	.word	0x200001ec

08000630 <lps25h_readTemperatureC>:
/**
  * @brief  Reads temperature in degrees C
  * @retval None
  */
void lps25h_readTemperatureC(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	lps25h_readTemperature();
 8000634:	f7ff ffe4 	bl	8000600 <lps25h_readTemperature>
	alititude.temperature_C = 42.5f + alititude.temperature / 480.0f;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <lps25h_readTemperatureC+0x30>)
 800063a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000646:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000664 <lps25h_readTemperatureC+0x34>
 800064a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800064e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000668 <lps25h_readTemperatureC+0x38>
 8000652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000656:	4b02      	ldr	r3, [pc, #8]	; (8000660 <lps25h_readTemperatureC+0x30>)
 8000658:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000019c 	.word	0x2000019c
 8000664:	43f00000 	.word	0x43f00000
 8000668:	422a0000 	.word	0x422a0000

0800066c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000676:	20c8      	movs	r0, #200	; 0xc8
 8000678:	f001 f9c0 	bl	80019fc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800067c:	f000 fa7a 	bl	8000b74 <ft5336_I2C_InitializeIfRequired>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80006b0:	2300      	movs	r3, #0
 80006b2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80006b4:	f000 fa5e 	bl	8000b74 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e010      	b.n	80006e0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	21a8      	movs	r1, #168	; 0xa8
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f97b 	bl	80019c0 <TS_IO_Read>
 80006ca:	4603      	mov	r3, r0
 80006cc:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b51      	cmp	r3, #81	; 0x51
 80006d4:	d101      	bne.n	80006da <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	3301      	adds	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d802      	bhi.n	80006ec <ft5336_ReadID+0x4e>
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e8      	beq.n	80006be <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	b29b      	uxth	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fa44 	bl	8000b94 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f932 	bl	8000978 <ft5336_TS_DisableIT>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f945 	bl	80019c0 <TS_IO_Read>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b05      	cmp	r3, #5
 800074c:	d901      	bls.n	8000752 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <ft5336_TS_DetectTouch+0x50>)
 8000758:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft5336_TS_DetectTouch+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	b2db      	uxtb	r3, r3
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000cc 	.word	0x200000cc

08000770 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000792:	4b6d      	ldr	r3, [pc, #436]	; (8000948 <ft5336_TS_GetXY+0x1d8>)
 8000794:	789a      	ldrb	r2, [r3, #2]
 8000796:	4b6c      	ldr	r3, [pc, #432]	; (8000948 <ft5336_TS_GetXY+0x1d8>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	429a      	cmp	r2, r3
 800079c:	f080 80cf 	bcs.w	800093e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <ft5336_TS_GetXY+0x1d8>)
 80007a2:	789b      	ldrb	r3, [r3, #2]
 80007a4:	2b09      	cmp	r3, #9
 80007a6:	d871      	bhi.n	800088c <ft5336_TS_GetXY+0x11c>
 80007a8:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <ft5336_TS_GetXY+0x40>)
 80007aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ae:	bf00      	nop
 80007b0:	080007d9 	.word	0x080007d9
 80007b4:	080007eb 	.word	0x080007eb
 80007b8:	080007fd 	.word	0x080007fd
 80007bc:	0800080f 	.word	0x0800080f
 80007c0:	08000821 	.word	0x08000821
 80007c4:	08000833 	.word	0x08000833
 80007c8:	08000845 	.word	0x08000845
 80007cc:	08000857 	.word	0x08000857
 80007d0:	08000869 	.word	0x08000869
 80007d4:	0800087b 	.word	0x0800087b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80007d8:	2304      	movs	r3, #4
 80007da:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80007dc:	2303      	movs	r3, #3
 80007de:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80007e0:	2306      	movs	r3, #6
 80007e2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80007e4:	2305      	movs	r3, #5
 80007e6:	753b      	strb	r3, [r7, #20]
      break;
 80007e8:	e051      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80007ea:	230a      	movs	r3, #10
 80007ec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80007ee:	2309      	movs	r3, #9
 80007f0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80007f2:	230c      	movs	r3, #12
 80007f4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007f6:	230b      	movs	r3, #11
 80007f8:	753b      	strb	r3, [r7, #20]
      break;
 80007fa:	e048      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007fc:	2310      	movs	r3, #16
 80007fe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000800:	230f      	movs	r3, #15
 8000802:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000804:	2312      	movs	r3, #18
 8000806:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000808:	2311      	movs	r3, #17
 800080a:	753b      	strb	r3, [r7, #20]
      break;
 800080c:	e03f      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800080e:	2316      	movs	r3, #22
 8000810:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000812:	2315      	movs	r3, #21
 8000814:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000816:	2318      	movs	r3, #24
 8000818:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800081a:	2317      	movs	r3, #23
 800081c:	753b      	strb	r3, [r7, #20]
      break;
 800081e:	e036      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000820:	231c      	movs	r3, #28
 8000822:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000824:	231b      	movs	r3, #27
 8000826:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000828:	231e      	movs	r3, #30
 800082a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800082c:	231d      	movs	r3, #29
 800082e:	753b      	strb	r3, [r7, #20]
      break;
 8000830:	e02d      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000832:	2322      	movs	r3, #34	; 0x22
 8000834:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000836:	2321      	movs	r3, #33	; 0x21
 8000838:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800083a:	2324      	movs	r3, #36	; 0x24
 800083c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800083e:	2323      	movs	r3, #35	; 0x23
 8000840:	753b      	strb	r3, [r7, #20]
      break;
 8000842:	e024      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000844:	2328      	movs	r3, #40	; 0x28
 8000846:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000848:	2327      	movs	r3, #39	; 0x27
 800084a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800084c:	232a      	movs	r3, #42	; 0x2a
 800084e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000850:	2329      	movs	r3, #41	; 0x29
 8000852:	753b      	strb	r3, [r7, #20]
      break;
 8000854:	e01b      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000856:	232e      	movs	r3, #46	; 0x2e
 8000858:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800085a:	232d      	movs	r3, #45	; 0x2d
 800085c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800085e:	2330      	movs	r3, #48	; 0x30
 8000860:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000862:	232f      	movs	r3, #47	; 0x2f
 8000864:	753b      	strb	r3, [r7, #20]
      break;
 8000866:	e012      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000868:	2334      	movs	r3, #52	; 0x34
 800086a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800086c:	2333      	movs	r3, #51	; 0x33
 800086e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000870:	2336      	movs	r3, #54	; 0x36
 8000872:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000874:	2335      	movs	r3, #53	; 0x35
 8000876:	753b      	strb	r3, [r7, #20]
      break;
 8000878:	e009      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800087a:	233a      	movs	r3, #58	; 0x3a
 800087c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000882:	233c      	movs	r3, #60	; 0x3c
 8000884:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000886:	233b      	movs	r3, #59	; 0x3b
 8000888:	753b      	strb	r3, [r7, #20]
      break;
 800088a:	e000      	b.n	800088e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800088c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	7dfa      	ldrb	r2, [r7, #23]
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f892 	bl	80019c0 <TS_IO_Read>
 800089c:	4603      	mov	r3, r0
 800089e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80008a0:	7cfb      	ldrb	r3, [r7, #19]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 80008a8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	7dba      	ldrb	r2, [r7, #22]
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f884 	bl	80019c0 <TS_IO_Read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008bc:	7cfb      	ldrb	r3, [r7, #19]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 80008d6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80008e0:	89fb      	ldrh	r3, [r7, #14]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	7d7a      	ldrb	r2, [r7, #21]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 f869 	bl	80019c0 <TS_IO_Read>
 80008ee:	4603      	mov	r3, r0
 80008f0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80008f2:	7cfb      	ldrb	r3, [r7, #19]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 80008fa:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	7d3a      	ldrb	r2, [r7, #20]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f85b 	bl	80019c0 <TS_IO_Read>
 800090a:	4603      	mov	r3, r0
 800090c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800090e:	7cfb      	ldrb	r3, [r7, #19]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000918:	b21a      	sxth	r2, r3
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21b      	sxth	r3, r3
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 8000928:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <ft5336_TS_GetXY+0x1dc>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <ft5336_TS_GetXY+0x1d8>)
 8000934:	789b      	ldrb	r3, [r3, #2]
 8000936:	3301      	adds	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <ft5336_TS_GetXY+0x1d8>)
 800093c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000cc 	.word	0x200000cc
 800094c:	200000d0 	.word	0x200000d0

08000950 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	7bfa      	ldrb	r2, [r7, #15]
 8000968:	21a4      	movs	r1, #164	; 0xa4
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f80e 	bl	800198c <TS_IO_Write>
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	21a4      	movs	r1, #164	; 0xa4
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fffa 	bl	800198c <TS_IO_Write>
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	6039      	str	r1, [r7, #0]
 80009d8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2101      	movs	r1, #1
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 ffeb 	bl	80019c0 <TS_IO_Read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000a20:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <ft5336_TS_GetTouchInfo+0x158>)
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	461a      	mov	r2, r3
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	f080 8090 	bcs.w	8000b4e <ft5336_TS_GetTouchInfo+0x14e>
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b09      	cmp	r3, #9
 8000a32:	d85d      	bhi.n	8000af0 <ft5336_TS_GetTouchInfo+0xf0>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <ft5336_TS_GetTouchInfo+0x3c>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a65 	.word	0x08000a65
 8000a40:	08000a73 	.word	0x08000a73
 8000a44:	08000a81 	.word	0x08000a81
 8000a48:	08000a8f 	.word	0x08000a8f
 8000a4c:	08000a9d 	.word	0x08000a9d
 8000a50:	08000aab 	.word	0x08000aab
 8000a54:	08000ab9 	.word	0x08000ab9
 8000a58:	08000ac7 	.word	0x08000ac7
 8000a5c:	08000ad5 	.word	0x08000ad5
 8000a60:	08000ae3 	.word	0x08000ae3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a64:	2303      	movs	r3, #3
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e03f      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a72:	2309      	movs	r3, #9
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a76:	230d      	movs	r3, #13
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a7a:	230e      	movs	r3, #14
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e038      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a80:	230f      	movs	r3, #15
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a84:	2313      	movs	r3, #19
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a88:	2314      	movs	r3, #20
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e031      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a8e:	2315      	movs	r3, #21
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a92:	2319      	movs	r3, #25
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a96:	231a      	movs	r3, #26
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e02a      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a9c:	231b      	movs	r3, #27
 8000a9e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000aa0:	231f      	movs	r3, #31
 8000aa2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	757b      	strb	r3, [r7, #21]
      break;
 8000aa8:	e023      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000aaa:	2321      	movs	r3, #33	; 0x21
 8000aac:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000aae:	2325      	movs	r3, #37	; 0x25
 8000ab0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000ab2:	2326      	movs	r3, #38	; 0x26
 8000ab4:	757b      	strb	r3, [r7, #21]
      break;
 8000ab6:	e01c      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000ab8:	2327      	movs	r3, #39	; 0x27
 8000aba:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000abc:	232b      	movs	r3, #43	; 0x2b
 8000abe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000ac0:	232c      	movs	r3, #44	; 0x2c
 8000ac2:	757b      	strb	r3, [r7, #21]
      break;
 8000ac4:	e015      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000ac6:	232d      	movs	r3, #45	; 0x2d
 8000ac8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000aca:	2331      	movs	r3, #49	; 0x31
 8000acc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000ace:	2332      	movs	r3, #50	; 0x32
 8000ad0:	757b      	strb	r3, [r7, #21]
      break;
 8000ad2:	e00e      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000ad4:	2333      	movs	r3, #51	; 0x33
 8000ad6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000ad8:	2337      	movs	r3, #55	; 0x37
 8000ada:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000adc:	2338      	movs	r3, #56	; 0x38
 8000ade:	757b      	strb	r3, [r7, #21]
      break;
 8000ae0:	e007      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000ae2:	2339      	movs	r3, #57	; 0x39
 8000ae4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000ae6:	233d      	movs	r3, #61	; 0x3d
 8000ae8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000aea:	233e      	movs	r3, #62	; 0x3e
 8000aec:	757b      	strb	r3, [r7, #21]
      break;
 8000aee:	e000      	b.n	8000af2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000af0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000af2:	89fb      	ldrh	r3, [r7, #14]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	7dfa      	ldrb	r2, [r7, #23]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 ff60 	bl	80019c0 <TS_IO_Read>
 8000b00:	4603      	mov	r3, r0
 8000b02:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000b04:	7d3b      	ldrb	r3, [r7, #20]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	119b      	asrs	r3, r3, #6
 8000b0a:	f003 0203 	and.w	r2, r3, #3
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	7dba      	ldrb	r2, [r7, #22]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 ff50 	bl	80019c0 <TS_IO_Read>
 8000b20:	4603      	mov	r3, r0
 8000b22:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000b24:	7d3b      	ldrb	r3, [r7, #20]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	7d7a      	ldrb	r2, [r7, #21]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 ff42 	bl	80019c0 <TS_IO_Read>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000b40:	7d3b      	ldrb	r3, [r7, #20]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	111b      	asrs	r3, r3, #4
 8000b46:	f003 0204 	and.w	r2, r3, #4
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000cc 	.word	0x200000cc

08000b5c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200000cc 	.word	0x200000cc

08000b74 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b78:	f7ff fff0 	bl	8000b5c <ft5336_Get_I2C_InitializedStatus>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d104      	bne.n	8000b8c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b82:	f000 fef9 	bl	8001978 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b86:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000cc 	.word	0x200000cc

08000b94 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LCD_clear>:
  * @brief  Clears the hole LCD.
  * @param  color:	color of the layer
  * @param	addr: 	addres of the layer (background, layer1 or layer2)
  * @retval None
  */
void LCD_clear(uint32_t color, uint32_t addr){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	for(uint16_t h=0; h<272; h++){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	e01b      	b.n	8000bf8 <LCD_clear+0x48>
		for(uint16_t w=0; w<480; w++){
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	81bb      	strh	r3, [r7, #12]
 8000bc4:	e011      	b.n	8000bea <LCD_clear+0x3a>
			*(__IO uint32_t*)(addr + (4*(h*480 + w))) = color;
 8000bc6:	89fa      	ldrh	r2, [r7, #14]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	1a9b      	subs	r3, r3, r2
 8000bce:	015b      	lsls	r3, r3, #5
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	89bb      	ldrh	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	4413      	add	r3, r2
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
		for(uint16_t w=0; w<480; w++){
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	3301      	adds	r3, #1
 8000be8:	81bb      	strh	r3, [r7, #12]
 8000bea:	89bb      	ldrh	r3, [r7, #12]
 8000bec:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000bf0:	d3e9      	bcc.n	8000bc6 <LCD_clear+0x16>
	for(uint16_t h=0; h<272; h++){
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	81fb      	strh	r3, [r7, #14]
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000bfe:	d3df      	bcc.n	8000bc0 <LCD_clear+0x10>
		}
	}
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LCD_draw_point>:
  * @param  color:	color of the layer
  * @param	addr: 	addres of the layer (background, layer1 or layer2)
  * @retval None
  */
void LCD_draw_point(uint16_t x, uint16_t y, uint16_t thickness, uint32_t color, uint32_t addr)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b087      	sub	sp, #28
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4603      	mov	r3, r0
 8000c18:	81fb      	strh	r3, [r7, #14]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	81bb      	strh	r3, [r7, #12]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	817b      	strh	r3, [r7, #10]
	for(uint16_t h=y-thickness/2; h<y+thickness/2; h++){
 8000c22:	897b      	ldrh	r3, [r7, #10]
 8000c24:	085b      	lsrs	r3, r3, #1
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	89ba      	ldrh	r2, [r7, #12]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	82fb      	strh	r3, [r7, #22]
 8000c2e:	e023      	b.n	8000c78 <LCD_draw_point+0x6a>
			for(uint16_t w=x-thickness/2; w<x+thickness/2; w++){
 8000c30:	897b      	ldrh	r3, [r7, #10]
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	89fa      	ldrh	r2, [r7, #14]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	82bb      	strh	r3, [r7, #20]
 8000c3c:	e011      	b.n	8000c62 <LCD_draw_point+0x54>
				*(__IO uint32_t*)(addr + (4*(h*480 + w))) = color;
 8000c3e:	8afa      	ldrh	r2, [r7, #22]
 8000c40:	4613      	mov	r3, r2
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	1a9b      	subs	r3, r3, r2
 8000c46:	015b      	lsls	r3, r3, #5
 8000c48:	461a      	mov	r2, r3
 8000c4a:	8abb      	ldrh	r3, [r7, #20]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	461a      	mov	r2, r3
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	4413      	add	r3, r2
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6013      	str	r3, [r2, #0]
			for(uint16_t w=x-thickness/2; w<x+thickness/2; w++){
 8000c5c:	8abb      	ldrh	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	82bb      	strh	r3, [r7, #20]
 8000c62:	8aba      	ldrh	r2, [r7, #20]
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	8979      	ldrh	r1, [r7, #10]
 8000c68:	0849      	lsrs	r1, r1, #1
 8000c6a:	b289      	uxth	r1, r1
 8000c6c:	440b      	add	r3, r1
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dbe5      	blt.n	8000c3e <LCD_draw_point+0x30>
	for(uint16_t h=y-thickness/2; h<y+thickness/2; h++){
 8000c72:	8afb      	ldrh	r3, [r7, #22]
 8000c74:	3301      	adds	r3, #1
 8000c76:	82fb      	strh	r3, [r7, #22]
 8000c78:	8afa      	ldrh	r2, [r7, #22]
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	8979      	ldrh	r1, [r7, #10]
 8000c7e:	0849      	lsrs	r1, r1, #1
 8000c80:	b289      	uxth	r1, r1
 8000c82:	440b      	add	r3, r1
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbd3      	blt.n	8000c30 <LCD_draw_point+0x22>
			}
		}
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <LCD_draw_Hline>:
  * @param  color: 		color of the layer
  * @param	addr: 		addres of the layer (background, layer1 or layer2)
  * @retval None
  */
void LCD_draw_Hline(uint16_t x_start, uint16_t y_start, uint16_t length, uint16_t thickness, uint32_t color, uint32_t addr)
{
 8000c96:	b490      	push	{r4, r7}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	80fb      	strh	r3, [r7, #6]
 8000ca8:	4603      	mov	r3, r0
 8000caa:	80bb      	strh	r3, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	803b      	strh	r3, [r7, #0]
	for(uint16_t h=y_start; h<y_start + thickness; h++){
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	81fb      	strh	r3, [r7, #14]
 8000cb8:	e01d      	b.n	8000cf6 <LCD_draw_Hline+0x60>
			for(uint16_t w=x_start; w<length + x_start; w++){
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	81bb      	strh	r3, [r7, #12]
 8000cbe:	e011      	b.n	8000ce4 <LCD_draw_Hline+0x4e>
				*(__IO uint32_t*)(addr + (4*(h*480 + w))) = color;
 8000cc0:	89fa      	ldrh	r2, [r7, #14]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	461a      	mov	r2, r3
 8000ccc:	89bb      	ldrh	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	6013      	str	r3, [r2, #0]
			for(uint16_t w=x_start; w<length + x_start; w++){
 8000cde:	89bb      	ldrh	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	81bb      	strh	r3, [r7, #12]
 8000ce4:	89ba      	ldrh	r2, [r7, #12]
 8000ce6:	8879      	ldrh	r1, [r7, #2]
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	440b      	add	r3, r1
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbe7      	blt.n	8000cc0 <LCD_draw_Hline+0x2a>
	for(uint16_t h=y_start; h<y_start + thickness; h++){
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	89fa      	ldrh	r2, [r7, #14]
 8000cf8:	88b9      	ldrh	r1, [r7, #4]
 8000cfa:	883b      	ldrh	r3, [r7, #0]
 8000cfc:	440b      	add	r3, r1
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dbdb      	blt.n	8000cba <LCD_draw_Hline+0x24>
			}
		}
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc90      	pop	{r4, r7}
 8000d0c:	4770      	bx	lr

08000d0e <LCD_draw_Vline>:
  * @param  color: 		color of the layer
  * @param	addr: 		addres of the layer (background, layer1 or layer2)
  * @retval None
  */
void LCD_draw_Vline(uint16_t x_start, uint16_t y_start, uint16_t length, uint16_t thickness, uint32_t color, uint32_t addr)
{
 8000d0e:	b490      	push	{r4, r7}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4604      	mov	r4, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4611      	mov	r1, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4623      	mov	r3, r4
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	4603      	mov	r3, r0
 8000d22:	80bb      	strh	r3, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	803b      	strh	r3, [r7, #0]
	for(uint16_t h=y_start; h<y_start + length; h++){
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	81fb      	strh	r3, [r7, #14]
 8000d30:	e01d      	b.n	8000d6e <LCD_draw_Vline+0x60>
			for(uint16_t w=x_start ; w<x_start + thickness; w++){
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	81bb      	strh	r3, [r7, #12]
 8000d36:	e011      	b.n	8000d5c <LCD_draw_Vline+0x4e>
				*(__IO uint32_t*)(addr+ (4*(h*480 + w))) = color;
 8000d38:	89fa      	ldrh	r2, [r7, #14]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	1a9b      	subs	r3, r3, r2
 8000d40:	015b      	lsls	r3, r3, #5
 8000d42:	461a      	mov	r2, r3
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	6013      	str	r3, [r2, #0]
			for(uint16_t w=x_start ; w<x_start + thickness; w++){
 8000d56:	89bb      	ldrh	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	81bb      	strh	r3, [r7, #12]
 8000d5c:	89ba      	ldrh	r2, [r7, #12]
 8000d5e:	88f9      	ldrh	r1, [r7, #6]
 8000d60:	883b      	ldrh	r3, [r7, #0]
 8000d62:	440b      	add	r3, r1
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbe7      	blt.n	8000d38 <LCD_draw_Vline+0x2a>
	for(uint16_t h=y_start; h<y_start + length; h++){
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	81fb      	strh	r3, [r7, #14]
 8000d6e:	89fa      	ldrh	r2, [r7, #14]
 8000d70:	88b9      	ldrh	r1, [r7, #4]
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	440b      	add	r3, r1
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dbdb      	blt.n	8000d32 <LCD_draw_Vline+0x24>
			}
		}
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc90      	pop	{r4, r7}
 8000d84:	4770      	bx	lr

08000d86 <LCD_draw_Rectangle>:
  * @param  color: 				color of the layer
  * @param	addr: 				addres of the layer (background, layer1 or layer2)
  * @retval None
  */
void LCD_draw_Rectangle(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t thickness, uint32_t color, uint32_t addr)
{
 8000d86:	b590      	push	{r4, r7, lr}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af02      	add	r7, sp, #8
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	4611      	mov	r1, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	4603      	mov	r3, r0
 8000d9a:	80bb      	strh	r3, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	803b      	strh	r3, [r7, #0]
	LCD_draw_Hline(x_start, y_start, x_end - x_start, thickness, color, addr);
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	8b3c      	ldrh	r4, [r7, #24]
 8000dae:	88b9      	ldrh	r1, [r7, #4]
 8000db0:	88f8      	ldrh	r0, [r7, #6]
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4623      	mov	r3, r4
 8000dbc:	f7ff ff6b 	bl	8000c96 <LCD_draw_Hline>
	LCD_draw_Hline(x_start, y_end, x_end - x_start, thickness, color, addr);
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	8b3c      	ldrh	r4, [r7, #24]
 8000dca:	8839      	ldrh	r1, [r7, #0]
 8000dcc:	88f8      	ldrh	r0, [r7, #6]
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	f7ff ff5d 	bl	8000c96 <LCD_draw_Hline>
	LCD_draw_Vline(x_start, y_start, y_end - y_start, thickness, color, addr);
 8000ddc:	883a      	ldrh	r2, [r7, #0]
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	8b3c      	ldrh	r4, [r7, #24]
 8000de6:	88b9      	ldrh	r1, [r7, #4]
 8000de8:	88f8      	ldrh	r0, [r7, #6]
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	4623      	mov	r3, r4
 8000df4:	f7ff ff8b 	bl	8000d0e <LCD_draw_Vline>
	LCD_draw_Vline(x_end, y_start, y_end - y_start + thickness, thickness, color, addr);
 8000df8:	883a      	ldrh	r2, [r7, #0]
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	8b3b      	ldrh	r3, [r7, #24]
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	8b3c      	ldrh	r4, [r7, #24]
 8000e08:	88b9      	ldrh	r1, [r7, #4]
 8000e0a:	8878      	ldrh	r0, [r7, #2]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4623      	mov	r3, r4
 8000e16:	f7ff ff7a 	bl	8000d0e <LCD_draw_Vline>
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}

08000e22 <LCD_draw_text_rle>:
  * @param  y: y from which the text is to be displayed, distance from top edge
  * @param  font: is a structure for the corresponding font (the data must by RLE)
  * @param	addr: addres of the layer (background, layer1 or layer2)
  * @retval None
  */
void LCD_draw_text_rle(char* text, uint16_t x, uint16_t y, Font_t* font, uint32_t addr){
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b090      	sub	sp, #64	; 0x40
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	817b      	strh	r3, [r7, #10]
 8000e30:	4613      	mov	r3, r2
 8000e32:	813b      	strh	r3, [r7, #8]
	uint8_t len = strlen(text);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff f9eb 	bl	8000210 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t c;
	uint16_t pairs;
	uint16_t same;
	uint32_t color;

	for(uint32_t s=0; s<len; s++){
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
 8000e44:	e07f      	b.n	8000f46 <LCD_draw_text_rle+0x124>
		offset = font->offset[text[s] - font->start];
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	68f9      	ldr	r1, [r7, #12]
 8000e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4e:	440b      	add	r3, r1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	1acb      	subs	r3, r1, r3
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
		w = font->bitmap[offset++];
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e68:	1c59      	adds	r1, r3, #1
 8000e6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	623b      	str	r3, [r7, #32]
		h = font->bitmap[offset++];
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7a:	1c59      	adds	r1, r3, #1
 8000e7c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61fb      	str	r3, [r7, #28]

		for(uint32_t r=0; r<h; r++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
 8000e8a:	e050      	b.n	8000f2e <LCD_draw_text_rle+0x10c>
			c = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	877b      	strh	r3, [r7, #58]	; 0x3a
			pairs = font->bitmap[offset++];
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e96:	1c59      	adds	r1, r3, #1
 8000e98:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	837b      	strh	r3, [r7, #26]

			for(uint32_t p=0; p<pairs; p++){
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea6:	e03b      	b.n	8000f20 <LCD_draw_text_rle+0xfe>

				same = font->bitmap[offset++];
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eae:	1c59      	adds	r1, r3, #1
 8000eb0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	833b      	strh	r3, [r7, #24]
				color = font->bitmap[offset++];
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec0:	1c59      	adds	r1, r3, #1
 8000ec2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	617b      	str	r3, [r7, #20]

				for(uint32_t s=0; s<same; s++){
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed0:	e01f      	b.n	8000f12 <LCD_draw_text_rle+0xf0>
					if(c < w){
 8000ed2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ed4:	6a3a      	ldr	r2, [r7, #32]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d918      	bls.n	8000f0c <LCD_draw_text_rle+0xea>
						if(color != 0xFF000000){
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8000ee0:	d011      	beq.n	8000f06 <LCD_draw_text_rle+0xe4>
							*(__IO uint32_t*)(addr + (4*((y + r)*480 + x + c))) = color;
 8000ee2:	893a      	ldrh	r2, [r7, #8]
 8000ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee6:	441a      	add	r2, r3
 8000ee8:	4613      	mov	r3, r2
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	897b      	ldrh	r3, [r7, #10]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ef8:	4413      	add	r3, r2
 8000efa:	009a      	lsls	r2, r3, #2
 8000efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000efe:	4413      	add	r3, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	6013      	str	r3, [r2, #0]
						}
						c++;
 8000f06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000f08:	3301      	adds	r3, #1
 8000f0a:	877b      	strh	r3, [r7, #58]	; 0x3a
				for(uint32_t s=0; s<same; s++){
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	3301      	adds	r3, #1
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f12:	8b3b      	ldrh	r3, [r7, #24]
 8000f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3db      	bcc.n	8000ed2 <LCD_draw_text_rle+0xb0>
			for(uint32_t p=0; p<pairs; p++){
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f20:	8b7b      	ldrh	r3, [r7, #26]
 8000f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3bf      	bcc.n	8000ea8 <LCD_draw_text_rle+0x86>
		for(uint32_t r=0; r<h; r++){
 8000f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3aa      	bcc.n	8000e8c <LCD_draw_text_rle+0x6a>
					}
				}
			}
		}

		x += w;
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	897b      	ldrh	r3, [r7, #10]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	817b      	strh	r3, [r7, #10]
	for(uint32_t s=0; s<len; s++){
 8000f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f42:	3301      	adds	r3, #1
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
 8000f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f4ff af7a 	bcc.w	8000e46 <LCD_draw_text_rle+0x24>
	}
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3740      	adds	r7, #64	; 0x40
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LCD_draw_image_rle>:
  * @param	x, y:		picture position (distance from the top left corner of the screen)
  * @param	addr: 		addres of the layer (background, layer1 or layer2)
  * @param modulate		change the colors of the picture. Default value to write: LCD_COLOR_NONE
  * @retval None
  */
void LCD_draw_image_rle(const uint32_t* src, uint16_t x, uint16_t y, uint32_t addr, uint32_t modulate){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b08b      	sub	sp, #44	; 0x2c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	817b      	strh	r3, [r7, #10]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	813b      	strh	r3, [r7, #8]
	uint32_t w = src[0];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	61fb      	str	r3, [r7, #28]
	uint32_t h = src[1];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
	uint16_t c;
	uint16_t pairs;
	uint16_t same;
	uint32_t color;

	src = src + 2;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	60fb      	str	r3, [r7, #12]

	for(uint16_t r=0; r<h; r++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f84:	e048      	b.n	8001018 <LCD_draw_image_rle+0xbc>
		c = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	84fb      	strh	r3, [r7, #38]	; 0x26
		pairs = *src++;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1d1a      	adds	r2, r3, #4
 8000f8e:	60fa      	str	r2, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	82fb      	strh	r3, [r7, #22]

		for(uint16_t p=0; p<pairs; p++){
 8000f94:	2300      	movs	r3, #0
 8000f96:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f98:	e037      	b.n	800100a <LCD_draw_image_rle+0xae>

			same = *src++;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1d1a      	adds	r2, r3, #4
 8000f9e:	60fa      	str	r2, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	82bb      	strh	r3, [r7, #20]
			color = *src++;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1d1a      	adds	r2, r3, #4
 8000fa8:	60fa      	str	r2, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]

			for(uint16_t s=0; s<same; s++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	843b      	strh	r3, [r7, #32]
 8000fb2:	e023      	b.n	8000ffc <LCD_draw_image_rle+0xa0>
				if(c < w){
 8000fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d91c      	bls.n	8000ff6 <LCD_draw_image_rle+0x9a>
					if(color & 0xFF000000){
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d014      	beq.n	8000ff0 <LCD_draw_image_rle+0x94>
						*(__IO uint32_t*)(addr + (4*((y + r)*480 + x + c))) = color & modulate;
 8000fc6:	893a      	ldrh	r2, [r7, #8]
 8000fc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fca:	441a      	add	r2, r3
 8000fcc:	4613      	mov	r3, r2
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	897b      	ldrh	r3, [r7, #10]
 8000fd8:	441a      	add	r2, r3
 8000fda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fec:	4013      	ands	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
					}
					c++;
 8000ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	84fb      	strh	r3, [r7, #38]	; 0x26
			for(uint16_t s=0; s<same; s++){
 8000ff6:	8c3b      	ldrh	r3, [r7, #32]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	843b      	strh	r3, [r7, #32]
 8000ffc:	8c3a      	ldrh	r2, [r7, #32]
 8000ffe:	8abb      	ldrh	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3d7      	bcc.n	8000fb4 <LCD_draw_image_rle+0x58>
		for(uint16_t p=0; p<pairs; p++){
 8001004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001006:	3301      	adds	r3, #1
 8001008:	847b      	strh	r3, [r7, #34]	; 0x22
 800100a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800100c:	8afb      	ldrh	r3, [r7, #22]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3c3      	bcc.n	8000f9a <LCD_draw_image_rle+0x3e>
	for(uint16_t r=0; r<h; r++){
 8001012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8b2      	bhi.n	8000f86 <LCD_draw_image_rle+0x2a>
				}
			}
		}
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	372c      	adds	r7, #44	; 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <LCD_SDRAM_init>:

/**
 * @brief	Initialization for FMC
 * @param	RefreshCount: Set the refresh time
 */
void LCD_SDRAM_init(uint32_t RefreshCount){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
	/* Configuration created from Reference manual RM0385 */

	/* Step 1 and Step 2 already done in HAL_SDRAM_Init() */

	/* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001044:	2210      	movs	r2, #16
 8001046:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber      = 1;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800104a:	2201      	movs	r2, #1
 800104c:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]

	// Send the command
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001058:	4923      	ldr	r1, [pc, #140]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800105a:	4824      	ldr	r0, [pc, #144]	; (80010ec <LCD_SDRAM_init+0xbc>)
 800105c:	f005 f9d8 	bl	8006410 <HAL_SDRAM_SendCommand>

	/* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
	HAL_Delay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f001 fe5b 	bl	8002d1c <HAL_Delay>

	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001068:	2202      	movs	r2, #2
 800106a:	601a      	str	r2, [r3, #0]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800106e:	2210      	movs	r2, #16
 8001070:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber      = 1;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001074:	2201      	movs	r2, #1
 8001076:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]

	// Send the command
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800107e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001082:	4919      	ldr	r1, [pc, #100]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001084:	4819      	ldr	r0, [pc, #100]	; (80010ec <LCD_SDRAM_init+0xbc>)
 8001086:	f005 f9c3 	bl	8006410 <HAL_SDRAM_SendCommand>

	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800108c:	2203      	movs	r2, #3
 800108e:	601a      	str	r2, [r3, #0]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001092:	2210      	movs	r2, #16
 8001094:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber      = 8;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 8001098:	2208      	movs	r2, #8
 800109a:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]

	// Send the command
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a6:	4910      	ldr	r1, [pc, #64]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 80010a8:	4810      	ldr	r0, [pc, #64]	; (80010ec <LCD_SDRAM_init+0xbc>)
 80010aa:	f005 f9b1 	bl	8006410 <HAL_SDRAM_SendCommand>

	/* Step 7: Program the external memory mode register */
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80010ae:	f44f 7308 	mov.w	r3, #544	; 0x220
 80010b2:	60fb      	str	r3, [r7, #12]
					 SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
					 SDRAM_MODEREG_CAS_LATENCY_2           |\
					 SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
					 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	601a      	str	r2, [r3, #0]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 80010bc:	2210      	movs	r2, #16
 80010be:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber      = 1;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 80010ca:	60d3      	str	r3, [r2, #12]

	// Send the command
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d0:	4905      	ldr	r1, [pc, #20]	; (80010e8 <LCD_SDRAM_init+0xb8>)
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <LCD_SDRAM_init+0xbc>)
 80010d4:	f005 f99c 	bl	8006410 <HAL_SDRAM_SendCommand>

	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0385 */
	// Set the device refresh rate
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <LCD_SDRAM_init+0xbc>)
 80010dc:	f005 f9cd 	bl	800647a <HAL_SDRAM_ProgramRefreshRate>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000d4 	.word	0x200000d4
 80010ec:	2000032c 	.word	0x2000032c

080010f0 <LCD_init>:

/**
 * @brief	Initialization for LCD
 * @param	draw_event: Is a function event
 */
uint32_t LCD_init(callback_draw_event draw_event){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	ltdc_draw_event = draw_event;
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LCD_init+0x34>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]

	LCD_SDRAM_init(SDRAM_REFRESH_COUNT);
 80010fe:	f240 6003 	movw	r0, #1539	; 0x603
 8001102:	f7ff ff95 	bl	8001030 <LCD_SDRAM_init>

	LCD_clear(0x00000000, LCD_FB_START_ADDRESS + LCD_L0_OFFSET);
 8001106:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fd50 	bl	8000bb0 <LCD_clear>
	LCD_clear(0x00000000, LCD_FB_START_ADDRESS + LCD_L1_OFFSET);
 8001110:	4905      	ldr	r1, [pc, #20]	; (8001128 <LCD_init+0x38>)
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fd4c 	bl	8000bb0 <LCD_clear>

	return LCD_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e4 	.word	0x200000e4
 8001128:	c0400000 	.word	0xc0400000

0800112c <LCD_update>:

/**
 * @brief	Function to update layers
 */
uint32_t LCD_update(void){
 800112c:	b580      	push	{r7, lr}
 800112e:	b09c      	sub	sp, #112	; 0x70
 8001130:	af00      	add	r7, sp, #0
	static uint8_t swap;
	uint32_t address;
	LCD_LayerCfgTypeDef layer0_config = {0};
 8001132:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001136:	2234      	movs	r2, #52	; 0x34
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fe54 	bl	8006de8 <memset>
	LCD_LayerCfgTypeDef layer1_config = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2234      	movs	r2, #52	; 0x34
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f005 fe4e 	bl	8006de8 <memset>

	address = swap ? LCD_BB_START_ADDRESS : LCD_FB_START_ADDRESS;
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <LCD_update+0x124>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <LCD_update+0x2c>
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <LCD_update+0x128>)
 8001156:	e001      	b.n	800115c <LCD_update+0x30>
 8001158:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800115c:	66fb      	str	r3, [r7, #108]	; 0x6c
	swap ^= 1;
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <LCD_update+0x124>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <LCD_update+0x124>)
 800116a:	701a      	strb	r2, [r3, #0]

	if(ltdc_draw_event){
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <LCD_update+0x12c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <LCD_update+0x50>
		ltdc_draw_event(address);
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <LCD_update+0x12c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800117a:	4798      	blx	r3
	}


	layer0_config.WindowX0 = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
	layer0_config.WindowX1 = 480;
 8001180:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
	layer0_config.WindowY0 = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	643b      	str	r3, [r7, #64]	; 0x40
	layer0_config.WindowY1 = 272;
 800118a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
	layer0_config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001190:	2300      	movs	r3, #0
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
	layer0_config.Alpha = 255;
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
	layer0_config.Alpha0 = 255;
 8001198:	23ff      	movs	r3, #255	; 0xff
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
	layer0_config.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800119c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011a0:	657b      	str	r3, [r7, #84]	; 0x54
	layer0_config.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011a2:	2307      	movs	r3, #7
 80011a4:	65bb      	str	r3, [r7, #88]	; 0x58
	layer0_config.FBStartAdress = address + LCD_L0_OFFSET;
 80011a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	layer0_config.ImageWidth = 480;
 80011aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011ae:	663b      	str	r3, [r7, #96]	; 0x60
	layer0_config.ImageHeight = 272;
 80011b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
	layer0_config.Backcolor.Blue = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	layer0_config.Backcolor.Green = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	layer0_config.Backcolor.Red = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	if(HAL_LTDC_ConfigLayer(&hltdc, &layer0_config, 0) != HAL_OK){
 80011c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4822      	ldr	r0, [pc, #136]	; (800125c <LCD_update+0x130>)
 80011d2:	f003 fe8b 	bl	8004eec <HAL_LTDC_ConfigLayer>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <LCD_update+0xb4>
		return 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	e033      	b.n	8001248 <LCD_update+0x11c>
	}

	layer1_config.WindowX0 = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
	layer1_config.WindowX1 = 480;
 80011e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011e8:	60bb      	str	r3, [r7, #8]
	layer1_config.WindowY0 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
	layer1_config.WindowY1 = 272;
 80011ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011f2:	613b      	str	r3, [r7, #16]
	layer1_config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
	layer1_config.Alpha = 255;
 80011f8:	23ff      	movs	r3, #255	; 0xff
 80011fa:	61bb      	str	r3, [r7, #24]
	layer1_config.Alpha0 = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
	layer1_config.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001200:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001204:	623b      	str	r3, [r7, #32]
	layer1_config.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
	layer1_config.FBStartAdress = address + LCD_L1_OFFSET;
 800120a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800120c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
	layer1_config.ImageWidth = 480;
 8001212:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
	layer1_config.ImageHeight = 272;
 8001218:	f44f 7388 	mov.w	r3, #272	; 0x110
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
	layer1_config.Backcolor.Blue = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	layer1_config.Backcolor.Green = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	layer1_config.Backcolor.Red = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(HAL_LTDC_ConfigLayer(&hltdc, &layer1_config, 1) != HAL_OK){
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	4809      	ldr	r0, [pc, #36]	; (800125c <LCD_update+0x130>)
 8001238:	f003 fe58 	bl	8004eec <HAL_LTDC_ConfigLayer>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <LCD_update+0x11a>
		return 1;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LCD_update+0x11c>
	}

	return 0;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3770      	adds	r7, #112	; 0x70
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000e8 	.word	0x200000e8
 8001254:	c0200000 	.word	0xc0200000
 8001258:	200000e4 	.word	0x200000e4
 800125c:	20000238 	.word	0x20000238

08001260 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	460a      	mov	r2, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <BSP_TS_Init+0x68>)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <BSP_TS_Init+0x6c>)
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <BSP_TS_Init+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2070      	movs	r0, #112	; 0x70
 8001286:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <BSP_TS_Init+0x70>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2070      	movs	r0, #112	; 0x70
 800128e:	4798      	blx	r3
 8001290:	4603      	mov	r3, r0
 8001292:	2b51      	cmp	r3, #81	; 0x51
 8001294:	d111      	bne.n	80012ba <BSP_TS_Init+0x5a>
  {
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <BSP_TS_Init+0x74>)
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <BSP_TS_Init+0x70>)
 800129a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <BSP_TS_Init+0x78>)
 800129e:	2270      	movs	r2, #112	; 0x70
 80012a0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <BSP_TS_Init+0x7c>)
 80012a4:	2208      	movs	r2, #8
 80012a6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <BSP_TS_Init+0x74>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <BSP_TS_Init+0x78>)
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	b292      	uxth	r2, r2
 80012b4:	4610      	mov	r0, r2
 80012b6:	4798      	blx	r3
 80012b8:	e001      	b.n	80012be <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80012ba:	2303      	movs	r3, #3
 80012bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200000f0 	.word	0x200000f0
 80012cc:	200000f2 	.word	0x200000f2
 80012d0:	20000000 	.word	0x20000000
 80012d4:	200000ec 	.word	0x200000ec
 80012d8:	200000f5 	.word	0x200000f5
 80012dc:	200000f4 	.word	0x200000f4

080012e0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b097      	sub	sp, #92	; 0x5c
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80012fa:	4b97      	ldr	r3, [pc, #604]	; (8001558 <BSP_TS_GetState+0x278>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4a96      	ldr	r2, [pc, #600]	; (800155c <BSP_TS_GetState+0x27c>)
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	b292      	uxth	r2, r2
 8001306:	4610      	mov	r0, r2
 8001308:	4798      	blx	r3
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	701a      	strb	r2, [r3, #0]

  if(TS_State->touchDetected)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 81a8 	beq.w	800166c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800131c:	2300      	movs	r3, #0
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001320:	e197      	b.n	8001652 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001322:	4b8d      	ldr	r3, [pc, #564]	; (8001558 <BSP_TS_GetState+0x278>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4a8c      	ldr	r2, [pc, #560]	; (800155c <BSP_TS_GetState+0x27c>)
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	b290      	uxth	r0, r2
 800132e:	f107 0120 	add.w	r1, r7, #32
 8001332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001334:	0052      	lsls	r2, r2, #1
 8001336:	188c      	adds	r4, r1, r2
 8001338:	f107 0114 	add.w	r1, r7, #20
 800133c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800133e:	0052      	lsls	r2, r2, #1
 8001340:	440a      	add	r2, r1
 8001342:	4621      	mov	r1, r4
 8001344:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8001346:	4b86      	ldr	r3, [pc, #536]	; (8001560 <BSP_TS_GetState+0x280>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d11b      	bne.n	8001386 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800134e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001356:	4413      	add	r3, r2
 8001358:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001364:	440b      	add	r3, r1
 8001366:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800136a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001372:	4413      	add	r3, r2
 8001374:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001380:	440b      	add	r3, r1
 8001382:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <BSP_TS_GetState+0x280>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8001392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800139a:	4413      	add	r3, r2
 800139c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80013a0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80013ae:	440b      	add	r3, r1
 80013b0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80013b4:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <BSP_TS_GetState+0x280>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80013c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013c8:	4413      	add	r3, r2
 80013ca:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80013ce:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80013dc:	440b      	add	r3, r1
 80013de:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <BSP_TS_GetState+0x280>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01b      	beq.n	8001426 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80013ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013f6:	4413      	add	r3, r2
 80013f8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80013fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001404:	440b      	add	r3, r1
 8001406:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800140a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001412:	4413      	add	r3, r2
 8001414:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001420:	440b      	add	r3, r1
 8001422:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800142e:	4413      	add	r3, r2
 8001430:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001434:	4619      	mov	r1, r3
 8001436:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <BSP_TS_GetState+0x284>)
 8001438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	4299      	cmp	r1, r3
 8001440:	d90e      	bls.n	8001460 <BSP_TS_GetState+0x180>
 8001442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800144a:	4413      	add	r3, r2
 800144c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001450:	4944      	ldr	r1, [pc, #272]	; (8001564 <BSP_TS_GetState+0x284>)
 8001452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001458:	b29b      	uxth	r3, r3
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	e00d      	b.n	800147c <BSP_TS_GetState+0x19c>
 8001460:	4a40      	ldr	r2, [pc, #256]	; (8001564 <BSP_TS_GetState+0x284>)
 8001462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	b29a      	uxth	r2, r3
 800146a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001472:	440b      	add	r3, r1
 8001474:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b29b      	uxth	r3, r3
 800147c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001488:	4413      	add	r3, r2
 800148a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800148e:	4619      	mov	r1, r3
 8001490:	4a35      	ldr	r2, [pc, #212]	; (8001568 <BSP_TS_GetState+0x288>)
 8001492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	4299      	cmp	r1, r3
 800149a:	d90e      	bls.n	80014ba <BSP_TS_GetState+0x1da>
 800149c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014a4:	4413      	add	r3, r2
 80014a6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <BSP_TS_GetState+0x288>)
 80014ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	e00d      	b.n	80014d6 <BSP_TS_GetState+0x1f6>
 80014ba:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <BSP_TS_GetState+0x288>)
 80014bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014cc:	440b      	add	r3, r1
 80014ce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80014da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80014e2:	4413      	add	r3, r2
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	dd17      	ble.n	8001518 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80014e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014f0:	4413      	add	r3, r2
 80014f2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <BSP_TS_GetState+0x284>)
 80014fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8001500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001508:	4413      	add	r3, r2
 800150a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800150e:	4619      	mov	r1, r3
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <BSP_TS_GetState+0x288>)
 8001512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <BSP_TS_GetState+0x27c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b70      	cmp	r3, #112	; 0x70
 800151e:	d125      	bne.n	800156c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8001520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001528:	4413      	add	r3, r2
 800152a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	460a      	mov	r2, r1
 8001538:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800153a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001542:	4413      	add	r3, r2
 8001544:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154c:	3304      	adds	r3, #4
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	460a      	mov	r2, r1
 8001554:	809a      	strh	r2, [r3, #4]
 8001556:	e02c      	b.n	80015b2 <BSP_TS_GetState+0x2d2>
 8001558:	200000ec 	.word	0x200000ec
 800155c:	200000f5 	.word	0x200000f5
 8001560:	200000f4 	.word	0x200000f4
 8001564:	200000f8 	.word	0x200000f8
 8001568:	2000010c 	.word	0x2000010c
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <BSP_TS_GetState+0x398>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4a42      	ldr	r2, [pc, #264]	; (800167c <BSP_TS_GetState+0x39c>)
 8001574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	fb03 f301 	mul.w	r3, r3, r1
 800157e:	0b1b      	lsrs	r3, r3, #12
 8001580:	b299      	uxth	r1, r3
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	460a      	mov	r2, r1
 800158c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800158e:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <BSP_TS_GetState+0x3a0>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4a3b      	ldr	r2, [pc, #236]	; (8001684 <BSP_TS_GetState+0x3a4>)
 8001596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	fb03 f301 	mul.w	r3, r3, r1
 80015a0:	0b1b      	lsrs	r3, r3, #12
 80015a2:	b299      	uxth	r1, r3
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a8:	3304      	adds	r3, #4
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	460a      	mov	r2, r1
 80015b0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <BSP_TS_GetState+0x3a8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b298      	uxth	r0, r3
 80015b8:	f107 010c 	add.w	r1, r7, #12
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	460b      	mov	r3, r1
 80015c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015ca:	f7ff fa19 	bl	8000a00 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	b2d9      	uxtb	r1, r3
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d6:	4413      	add	r3, r2
 80015d8:	3316      	adds	r3, #22
 80015da:	460a      	mov	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e6:	4413      	add	r3, r2
 80015e8:	3320      	adds	r3, #32
 80015ea:	460a      	mov	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d827      	bhi.n	8001644 <BSP_TS_GetState+0x364>
 80015f4:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <BSP_TS_GetState+0x31c>)
 80015f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fa:	bf00      	nop
 80015fc:	0800160d 	.word	0x0800160d
 8001600:	0800161b 	.word	0x0800161b
 8001604:	08001629 	.word	0x08001629
 8001608:	08001637 	.word	0x08001637
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001610:	4413      	add	r3, r2
 8001612:	331b      	adds	r3, #27
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
          break;
 8001618:	e018      	b.n	800164c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800161e:	4413      	add	r3, r2
 8001620:	331b      	adds	r3, #27
 8001622:	2202      	movs	r2, #2
 8001624:	701a      	strb	r2, [r3, #0]
          break;
 8001626:	e011      	b.n	800164c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162c:	4413      	add	r3, r2
 800162e:	331b      	adds	r3, #27
 8001630:	2203      	movs	r2, #3
 8001632:	701a      	strb	r2, [r3, #0]
          break;
 8001634:	e00a      	b.n	800164c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800163a:	4413      	add	r3, r2
 800163c:	331b      	adds	r3, #27
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
          break;
 8001642:	e003      	b.n	800164c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800164a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800164c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164e:	3301      	adds	r3, #1
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800165a:	4293      	cmp	r3, r2
 800165c:	f4ff ae61 	bcc.w	8001322 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f813 	bl	800168c <BSP_TS_Get_GestureId>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800166c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001670:	4618      	mov	r0, r3
 8001672:	3754      	adds	r7, #84	; 0x54
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	200000f0 	.word	0x200000f0
 800167c:	200000f8 	.word	0x200000f8
 8001680:	200000f2 	.word	0x200000f2
 8001684:	2000010c 	.word	0x2000010c
 8001688:	200000f5 	.word	0x200000f5

0800168c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <BSP_TS_Get_GestureId+0x100>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f990 	bl	80009ce <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b49      	cmp	r3, #73	; 0x49
 80016b2:	d05e      	beq.n	8001772 <BSP_TS_Get_GestureId+0xe6>
 80016b4:	2b49      	cmp	r3, #73	; 0x49
 80016b6:	d860      	bhi.n	800177a <BSP_TS_Get_GestureId+0xee>
 80016b8:	2b1c      	cmp	r3, #28
 80016ba:	d83f      	bhi.n	800173c <BSP_TS_Get_GestureId+0xb0>
 80016bc:	2b1c      	cmp	r3, #28
 80016be:	d85c      	bhi.n	800177a <BSP_TS_Get_GestureId+0xee>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <BSP_TS_Get_GestureId+0x3c>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	08001743 	.word	0x08001743
 80016cc:	0800177b 	.word	0x0800177b
 80016d0:	0800177b 	.word	0x0800177b
 80016d4:	0800177b 	.word	0x0800177b
 80016d8:	0800177b 	.word	0x0800177b
 80016dc:	0800177b 	.word	0x0800177b
 80016e0:	0800177b 	.word	0x0800177b
 80016e4:	0800177b 	.word	0x0800177b
 80016e8:	0800177b 	.word	0x0800177b
 80016ec:	0800177b 	.word	0x0800177b
 80016f0:	0800177b 	.word	0x0800177b
 80016f4:	0800177b 	.word	0x0800177b
 80016f8:	0800177b 	.word	0x0800177b
 80016fc:	0800177b 	.word	0x0800177b
 8001700:	0800177b 	.word	0x0800177b
 8001704:	0800177b 	.word	0x0800177b
 8001708:	0800174b 	.word	0x0800174b
 800170c:	0800177b 	.word	0x0800177b
 8001710:	0800177b 	.word	0x0800177b
 8001714:	0800177b 	.word	0x0800177b
 8001718:	08001753 	.word	0x08001753
 800171c:	0800177b 	.word	0x0800177b
 8001720:	0800177b 	.word	0x0800177b
 8001724:	0800177b 	.word	0x0800177b
 8001728:	0800175b 	.word	0x0800175b
 800172c:	0800177b 	.word	0x0800177b
 8001730:	0800177b 	.word	0x0800177b
 8001734:	0800177b 	.word	0x0800177b
 8001738:	08001763 	.word	0x08001763
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	d014      	beq.n	800176a <BSP_TS_Get_GestureId+0xde>
 8001740:	e01b      	b.n	800177a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001748:	e01a      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001750:	e016      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2202      	movs	r2, #2
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001758:	e012      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001760:	e00e      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001768:	e00a      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2205      	movs	r2, #5
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001770:	e006      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2206      	movs	r2, #6
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001778:	e002      	b.n	8001780 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
      break;
 800177e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200000f5 	.word	0x200000f5

08001790 <I2Cx_MspInit>:

static I2C_HandleTypeDef hI2cAudioHandler = {0};


static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <I2Cx_MspInit+0xac>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4a27      	ldr	r2, [pc, #156]	; (800183c <I2Cx_MspInit+0xac>)
 800179e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <I2Cx_MspInit+0xac>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80017b4:	2312      	movs	r3, #18
 80017b6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80017c0:	2304      	movs	r3, #4
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	481d      	ldr	r0, [pc, #116]	; (8001840 <I2Cx_MspInit+0xb0>)
 80017cc:	f001 fc3e 	bl	800304c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80017d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <I2Cx_MspInit+0xb0>)
 80017de:	f001 fc35 	bl	800304c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <I2Cx_MspInit+0xac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <I2Cx_MspInit+0xac>)
 80017e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <I2Cx_MspInit+0xac>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <I2Cx_MspInit+0xac>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <I2Cx_MspInit+0xac>)
 8001800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001804:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <I2Cx_MspInit+0xac>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <I2Cx_MspInit+0xac>)
 800180c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001810:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	210f      	movs	r1, #15
 8001816:	2048      	movs	r0, #72	; 0x48
 8001818:	f001 fba3 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800181c:	2048      	movs	r0, #72	; 0x48
 800181e:	f001 fbbc 	bl	8002f9a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	210f      	movs	r1, #15
 8001826:	2049      	movs	r0, #73	; 0x49
 8001828:	f001 fb9b 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800182c:	2049      	movs	r0, #73	; 0x49
 800182e:	f001 fbb4 	bl	8002f9a <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40021c00 	.word	0x40021c00

08001844 <I2Cx_Init>:


static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f002 fa78 	bl	8003d42 <HAL_I2C_GetState>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11d      	bne.n	8001894 <I2Cx_Init+0x50>
  {
	 i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <I2Cx_Init+0x58>)
 800185c:	601a      	str	r2, [r3, #0]

    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <I2Cx_Init+0x5c>)
 8001862:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff81 	bl	8001790 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f001 feae 	bl	80035f0 <HAL_I2C_Init>
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40005c00 	.word	0x40005c00
 80018a0:	40912732 	.word	0x40912732

080018a4 <I2Cx_Error>:

static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f001 ff2d 	bl	8003710 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffc4 	bl	8001844 <I2Cx_Init>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	72fb      	strb	r3, [r7, #11]
 80018d6:	460b      	mov	r3, r1
 80018d8:	813b      	strh	r3, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	b299      	uxth	r1, r3
 80018e6:	88f8      	ldrh	r0, [r7, #6]
 80018e8:	893a      	ldrh	r2, [r7, #8]
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4603      	mov	r3, r0
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f001 ff38 	bl	8003770 <HAL_I2C_Mem_Write>
 8001900:	4603      	mov	r3, r0
 8001902:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	4619      	mov	r1, r3
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ffc8 	bl	80018a4 <I2Cx_Error>
  }
  return status;
 8001914:	7dfb      	ldrb	r3, [r7, #23]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b08a      	sub	sp, #40	; 0x28
 8001922:	af04      	add	r7, sp, #16
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	4608      	mov	r0, r1
 8001928:	4611      	mov	r1, r2
 800192a:	461a      	mov	r2, r3
 800192c:	4603      	mov	r3, r0
 800192e:	72fb      	strb	r3, [r7, #11]
 8001930:	460b      	mov	r3, r1
 8001932:	813b      	strh	r3, [r7, #8]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	b299      	uxth	r1, r3
 8001940:	88f8      	ldrh	r0, [r7, #6]
 8001942:	893a      	ldrh	r2, [r7, #8]
 8001944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001948:	9302      	str	r3, [sp, #8]
 800194a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4603      	mov	r3, r0
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f002 f81f 	bl	8003998 <HAL_I2C_Mem_Read>
 800195a:	4603      	mov	r3, r0
 800195c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	4619      	mov	r1, r3
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff ff9b 	bl	80018a4 <I2Cx_Error>
  }
  return status;
 800196e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TS_IO_Init+0x10>)
 800197e:	f7ff ff61 	bl	8001844 <I2Cx_Init>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000120 	.word	0x20000120

0800198c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af02      	add	r7, sp, #8
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	460b      	mov	r3, r1
 8001998:	71bb      	strb	r3, [r7, #6]
 800199a:	4613      	mov	r3, r2
 800199c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	79f9      	ldrb	r1, [r7, #7]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	1d7b      	adds	r3, r7, #5
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <TS_IO_Write+0x30>)
 80019b0:	f7ff ff88 	bl	80018c4 <I2Cx_WriteMultiple>
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000120 	.word	0x20000120

080019c0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	79f9      	ldrb	r1, [r7, #7]
 80019da:	2301      	movs	r3, #1
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	f107 030f 	add.w	r3, r7, #15
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2301      	movs	r3, #1
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <TS_IO_Read+0x38>)
 80019e8:	f7ff ff99 	bl	800191e <I2Cx_ReadMultiple>

  return read_value;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000120 	.word	0x20000120

080019fc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 f989 	bl	8002d1c <HAL_Delay>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <app_Init>:
uint8_t tim7_flag = 0;
uint8_t log_temp = 0;
uint16_t display_value = 0;

void app_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	 LCD_init(on_lcd_draw);
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <app_Init+0x38>)
 8001a1a:	f7ff fb69 	bl	80010f0 <LCD_init>
	 HAL_Delay(200);
 8001a1e:	20c8      	movs	r0, #200	; 0xc8
 8001a20:	f001 f97c 	bl	8002d1c <HAL_Delay>
	 first_display(LCD_FB_START_ADDRESS);
 8001a24:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8001a28:	f000 fa2a 	bl	8001e80 <first_display>
	 BSP_TS_Init(480, 272);
 8001a2c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a30:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a34:	f7ff fc14 	bl	8001260 <BSP_TS_Init>
	 HAL_TIM_Base_Start_IT(&htim6);
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <app_Init+0x3c>)
 8001a3a:	f004 fd9d 	bl	8006578 <HAL_TIM_Base_Start_IT>
	 HAL_TIM_Base_Start_IT(&htim7);
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <app_Init+0x40>)
 8001a40:	f004 fd9a 	bl	8006578 <HAL_TIM_Base_Start_IT>
	 lps25h_Init();
 8001a44:	f7fe fdd4 	bl	80005f0 <lps25h_Init>
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	200002e0 	.word	0x200002e0
 8001a54:	20000360 	.word	0x20000360

08001a58 <app_loop>:

void app_loop(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	LCD_update();
 8001a5c:	f7ff fb66 	bl	800112c <LCD_update>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <on_lcd_draw>:

void on_lcd_draw(uint32_t addr){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

	switch(state)
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <on_lcd_draw+0x30>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <on_lcd_draw+0x18>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d004      	beq.n	8001a84 <on_lcd_draw+0x20>
	case DISPLAY_CHART:
		dashboard_chart(addr);
		break;
	}

}
 8001a7a:	e007      	b.n	8001a8c <on_lcd_draw+0x28>
		dashboard_record(addr);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f959 	bl	8001d34 <dashboard_record>
		break;
 8001a82:	e003      	b.n	8001a8c <on_lcd_draw+0x28>
		dashboard_chart(addr);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f88d 	bl	8001ba4 <dashboard_chart>
		break;
 8001a8a:	bf00      	nop
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000016c 	.word	0x2000016c

08001a98 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d122      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x56>

		BSP_TS_GetState(&touch_state);
 8001aa8:	482a      	ldr	r0, [pc, #168]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001aaa:	f7ff fc19 	bl	80012e0 <BSP_TS_GetState>
			if(touch_state.touchDetected)
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01b      	beq.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x56>
			{
				uint16_t x = touch_state.touchX[0];
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	81fb      	strh	r3, [r7, #14]
				uint16_t y = touch_state.touchY[0];
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001abe:	899b      	ldrh	r3, [r3, #12]
 8001ac0:	81bb      	strh	r3, [r7, #12]
				switch(state)
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d007      	beq.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x48>
 8001ad0:	e00e      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x58>
				{
				case DISPLAY_RECORD:
					logger_record(x,y);
 8001ad2:	89ba      	ldrh	r2, [r7, #12]
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f911 	bl	8001d00 <logger_record>
					break;
 8001ade:	e007      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x58>
				case DISPLAY_CHART:
					logger_chart(x,y);
 8001ae0:	89ba      	ldrh	r2, [r7, #12]
 8001ae2:	89fb      	ldrh	r3, [r7, #14]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f842 	bl	8001b70 <logger_chart>
					break;
 8001aec:	e000      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x58>
				}
			}
 8001aee:	bf00      	nop
	}
	if (htim == &htim7)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d127      	bne.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		if (state == DISPLAY_CHART)
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d122      	bne.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			lps25h_readTemperatureC();
 8001b02:	f7fe fd95 	bl	8000630 <lps25h_readTemperatureC>
			temperature_data[log_temp] = (int)(alititude.temperature_C);
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b08:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	ee17 3a90 	vmov	r3, s15
 8001b1a:	b299      	uxth	r1, r3
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b1e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			log_temp ++;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b2c:	701a      	strb	r2, [r3, #0]
			display_value ++;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b38:	801a      	strh	r2, [r3, #0]
			if(log_temp >= LOG_TEMP_DATA + 1)
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d902      	bls.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0xb0>
//				temperature_data[5] = temperature_data[6];
//				temperature_data[6] = temperature_data[7];
//				temperature_data[7] = temperature_data[8];
//				temperature_data[8] = temperature_data[9];
//				log_temp = 9;
				log_temp = 0;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200002e0 	.word	0x200002e0
 8001b54:	200001c0 	.word	0x200001c0
 8001b58:	2000016c 	.word	0x2000016c
 8001b5c:	20000360 	.word	0x20000360
 8001b60:	2000019c 	.word	0x2000019c
 8001b64:	20000186 	.word	0x20000186
 8001b68:	20000170 	.word	0x20000170
 8001b6c:	20000188 	.word	0x20000188

08001b70 <logger_chart>:

void logger_chart(uint16_t x, uint16_t y)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	80fb      	strh	r3, [r7, #6]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	80bb      	strh	r3, [r7, #4]
	if(x > 360 && y < 60)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001b86:	d905      	bls.n	8001b94 <logger_chart+0x24>
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	2b3b      	cmp	r3, #59	; 0x3b
 8001b8c:	d802      	bhi.n	8001b94 <logger_chart+0x24>
		state = DISPLAY_RECORD;
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <logger_chart+0x30>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	2000016c 	.word	0x2000016c

08001ba4 <dashboard_chart>:
void dashboard_chart(uint32_t addr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	6078      	str	r0, [r7, #4]
	LCD_clear(0x00000000, addr + LCD_L0_OFFSET);
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7fe fffe 	bl	8000bb0 <LCD_clear>
	LCD_clear(0x00000000, addr + LCD_L1_OFFSET);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001bba:	4619      	mov	r1, r3
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7fe fff7 	bl	8000bb0 <LCD_clear>
	LCD_draw_image_rle(chart, 0, 0, addr + LCD_L0_OFFSET, LCD_COLOR_NONE);
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4843      	ldr	r0, [pc, #268]	; (8001cdc <dashboard_chart+0x138>)
 8001bd0:	f7ff f9c4 	bl	8000f5c <LCD_draw_image_rle>
	LCD_draw_image_rle(back_pressed, 380, 20, addr + LCD_L1_OFFSET, LCD_COLOR_NONE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bde:	9200      	str	r2, [sp, #0]
 8001be0:	2214      	movs	r2, #20
 8001be2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001be6:	483e      	ldr	r0, [pc, #248]	; (8001ce0 <dashboard_chart+0x13c>)
 8001be8:	f7ff f9b8 	bl	8000f5c <LCD_draw_image_rle>

	for(uint8_t i = CHART_VERTICAL_NUMBER_1; i <= CHART_VERTICAL_NUMBER_10; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
 8001bf0:	e029      	b.n	8001c46 <dashboard_chart+0xa2>
	{
		char text[20] = {0};
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
		sprintf(text, "%d", i + 1);
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <dashboard_chart+0x140>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 f8f2 	bl	8006df8 <siprintf>
		LCD_draw_text_rle(text, (i + 1) * 35 + CHART_VERTICAL_0, CHART_HORIZONTAL_NUMBER, &font16, addr + LCD_L1_OFFSET);
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	00d2      	lsls	r2, r2, #3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3328      	adds	r3, #40	; 0x28
 8001c2a:	b299      	uxth	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001c32:	f107 0008 	add.w	r0, r7, #8
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <dashboard_chart+0x144>)
 8001c3a:	22f5      	movs	r2, #245	; 0xf5
 8001c3c:	f7ff f8f1 	bl	8000e22 <LCD_draw_text_rle>
	for(uint8_t i = CHART_VERTICAL_NUMBER_1; i <= CHART_VERTICAL_NUMBER_10; i++)
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	3301      	adds	r3, #1
 8001c44:	77fb      	strb	r3, [r7, #31]
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d9d2      	bls.n	8001bf2 <dashboard_chart+0x4e>
	}

	for(uint8_t i = 0; i < log_temp; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	77bb      	strb	r3, [r7, #30]
 8001c50:	e023      	b.n	8001c9a <dashboard_chart+0xf6>
		LCD_draw_point((i + 1) * 35 + CHART_VERTICAL_0, (232 - ((temperature_data[i] - 20)*12)), 5, LCD_COLOR_WHITE, addr + LCD_L1_OFFSET);
 8001c52:	7fbb      	ldrb	r3, [r7, #30]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	461a      	mov	r2, r3
 8001c60:	00d2      	lsls	r2, r2, #3
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3328      	adds	r3, #40	; 0x28
 8001c68:	b298      	uxth	r0, r3
 8001c6a:	7fbb      	ldrb	r3, [r7, #30]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <dashboard_chart+0x148>)
 8001c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c72:	461a      	mov	r2, r3
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8001c80:	b299      	uxth	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8e:	2205      	movs	r2, #5
 8001c90:	f7fe ffbd 	bl	8000c0e <LCD_draw_point>
	for(uint8_t i = 0; i < log_temp; i++)
 8001c94:	7fbb      	ldrb	r3, [r7, #30]
 8001c96:	3301      	adds	r3, #1
 8001c98:	77bb      	strb	r3, [r7, #30]
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <dashboard_chart+0x14c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	7fba      	ldrb	r2, [r7, #30]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3d6      	bcc.n	8001c52 <dashboard_chart+0xae>

	LCD_draw_text_rle("35", CHART_TEMP_VERTICAL, CHART_TEMPERATURE_30, &font16, addr + LCD_L0_OFFSET);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <dashboard_chart+0x144>)
 8001caa:	2234      	movs	r2, #52	; 0x34
 8001cac:	210a      	movs	r1, #10
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <dashboard_chart+0x150>)
 8001cb0:	f7ff f8b7 	bl	8000e22 <LCD_draw_text_rle>
	LCD_draw_text_rle("30", CHART_TEMP_VERTICAL, CHART_TEMPERATURE_20, &font16, addr + LCD_L0_OFFSET);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <dashboard_chart+0x144>)
 8001cba:	2270      	movs	r2, #112	; 0x70
 8001cbc:	210a      	movs	r1, #10
 8001cbe:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <dashboard_chart+0x154>)
 8001cc0:	f7ff f8af 	bl	8000e22 <LCD_draw_text_rle>
	LCD_draw_text_rle("25", CHART_TEMP_VERTICAL, CHART_TEMPERATURE_10, &font16, addr + LCD_L0_OFFSET);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <dashboard_chart+0x144>)
 8001cca:	22ac      	movs	r2, #172	; 0xac
 8001ccc:	210a      	movs	r1, #10
 8001cce:	480b      	ldr	r0, [pc, #44]	; (8001cfc <dashboard_chart+0x158>)
 8001cd0:	f7ff f8a7 	bl	8000e22 <LCD_draw_text_rle>


}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	08051d10 	.word	0x08051d10
 8001ce0:	080076c4 	.word	0x080076c4
 8001ce4:	0800766c 	.word	0x0800766c
 8001ce8:	2000002c 	.word	0x2000002c
 8001cec:	20000170 	.word	0x20000170
 8001cf0:	20000186 	.word	0x20000186
 8001cf4:	08007670 	.word	0x08007670
 8001cf8:	08007674 	.word	0x08007674
 8001cfc:	08007678 	.word	0x08007678

08001d00 <logger_record>:
void logger_record(uint16_t x, uint16_t y)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	80bb      	strh	r3, [r7, #4]
	if(x < 100 && y < 60)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	2b63      	cmp	r3, #99	; 0x63
 8001d14:	d805      	bhi.n	8001d22 <logger_record+0x22>
 8001d16:	88bb      	ldrh	r3, [r7, #4]
 8001d18:	2b3b      	cmp	r3, #59	; 0x3b
 8001d1a:	d802      	bhi.n	8001d22 <logger_record+0x22>
	{
		//display_value = 0;
		//log_temp = 0;
		state = DISPLAY_CHART;
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <logger_record+0x30>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
	}

}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000016c 	.word	0x2000016c

08001d34 <dashboard_record>:
void dashboard_record(uint32_t addr)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b08d      	sub	sp, #52	; 0x34
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	6078      	str	r0, [r7, #4]
	LCD_clear(0x00000000, addr + LCD_L0_OFFSET);
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7fe ff36 	bl	8000bb0 <LCD_clear>
	LCD_clear(0x00000000, addr + LCD_L1_OFFSET);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7fe ff2f 	bl	8000bb0 <LCD_clear>
	LCD_draw_text_rle("Temperature", 120, 70, &font30, addr + LCD_L1_OFFSET);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <dashboard_record+0x12c>)
 8001d5c:	2246      	movs	r2, #70	; 0x46
 8001d5e:	2178      	movs	r1, #120	; 0x78
 8001d60:	4840      	ldr	r0, [pc, #256]	; (8001e64 <dashboard_record+0x130>)
 8001d62:	f7ff f85e 	bl	8000e22 <LCD_draw_text_rle>
	uint32_t color = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
	char text[20] = {0};
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]

	temperature = (int)(alititude.temperature_C*10);
 8001d7c:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <dashboard_record+0x134>)
 8001d7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8e:	ee17 3a90 	vmov	r3, s15
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <dashboard_record+0x138>)
 8001d96:	801a      	strh	r2, [r3, #0]

	lps25h_readTemperatureC();
 8001d98:	f7fe fc4a 	bl	8000630 <lps25h_readTemperatureC>
	sprintf(text, "%d,%d", temperature/10, temperature%10);
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <dashboard_record+0x138>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	4a33      	ldr	r2, [pc, #204]	; (8001e70 <dashboard_record+0x13c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461c      	mov	r4, r3
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <dashboard_record+0x138>)
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <dashboard_record+0x13c>)
 8001db2:	fba3 1302 	umull	r1, r3, r3, r2
 8001db6:	08d9      	lsrs	r1, r3, #3
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f107 0008 	add.w	r0, r7, #8
 8001dc8:	4622      	mov	r2, r4
 8001dca:	492a      	ldr	r1, [pc, #168]	; (8001e74 <dashboard_record+0x140>)
 8001dcc:	f005 f814 	bl	8006df8 <siprintf>
	temperature = temperature/10;
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <dashboard_record+0x138>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <dashboard_record+0x13c>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <dashboard_record+0x138>)
 8001de0:	801a      	strh	r2, [r3, #0]

	if(temperature < 10)
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <dashboard_record+0x138>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	2b09      	cmp	r3, #9
 8001de8:	d802      	bhi.n	8001df0 <dashboard_record+0xbc>
	{
		color = LCD_COLOR_GREEN;
 8001dea:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8001dee:	61fb      	str	r3, [r7, #28]
	}
	if(temperature >= 20 && temperature < 30)
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <dashboard_record+0x138>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b13      	cmp	r3, #19
 8001df6:	d907      	bls.n	8001e08 <dashboard_record+0xd4>
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <dashboard_record+0x138>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	2b1d      	cmp	r3, #29
 8001dfe:	d803      	bhi.n	8001e08 <dashboard_record+0xd4>
	{
		color = LCD_COLOR_YELLOW;
 8001e00:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e001      	b.n	8001e0c <dashboard_record+0xd8>
	}
	else
	{
		color = LCD_COLOR_ORANGE;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <dashboard_record+0x144>)
 8001e0a:	61fb      	str	r3, [r7, #28]
	}
	LCD_draw_Rectangle(120, 120, 360, 200, 5, color, addr + LCD_L1_OFFSET);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2305      	movs	r3, #5
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	23c8      	movs	r3, #200	; 0xc8
 8001e1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001e22:	2178      	movs	r1, #120	; 0x78
 8001e24:	2078      	movs	r0, #120	; 0x78
 8001e26:	f7fe ffae 	bl	8000d86 <LCD_draw_Rectangle>
	LCD_draw_text_rle(text, 200, 145, &font30, addr + LCD_L1_OFFSET);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001e30:	f107 0008 	add.w	r0, r7, #8
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <dashboard_record+0x12c>)
 8001e38:	2291      	movs	r2, #145	; 0x91
 8001e3a:	21c8      	movs	r1, #200	; 0xc8
 8001e3c:	f7fe fff1 	bl	8000e22 <LCD_draw_text_rle>
	LCD_draw_image_rle(chart_pressed, 10, 20, addr + LCD_L1_OFFSET, LCD_COLOR_NONE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e4a:	9200      	str	r2, [sp, #0]
 8001e4c:	2214      	movs	r2, #20
 8001e4e:	210a      	movs	r1, #10
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <dashboard_record+0x148>)
 8001e52:	f7ff f883 	bl	8000f5c <LCD_draw_image_rle>

}
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000038 	.word	0x20000038
 8001e64:	0800767c 	.word	0x0800767c
 8001e68:	2000019c 	.word	0x2000019c
 8001e6c:	2000016e 	.word	0x2000016e
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	08007688 	.word	0x08007688
 8001e78:	ffffa500 	.word	0xffffa500
 8001e7c:	0800864c 	.word	0x0800864c

08001e80 <first_display>:
void first_display(uint32_t addr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
	 LCD_draw_text_rle("Przygotowane przez", 50, 80, &font30, addr + LCD_L0_OFFSET);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <first_display+0x84>)
 8001e8e:	2250      	movs	r2, #80	; 0x50
 8001e90:	2132      	movs	r1, #50	; 0x32
 8001e92:	481d      	ldr	r0, [pc, #116]	; (8001f08 <first_display+0x88>)
 8001e94:	f7fe ffc5 	bl	8000e22 <LCD_draw_text_rle>
	 LCD_draw_text_rle("Lukasz Pyzik", 100, 150, &font30, addr + LCD_L0_OFFSET);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <first_display+0x84>)
 8001e9e:	2296      	movs	r2, #150	; 0x96
 8001ea0:	2164      	movs	r1, #100	; 0x64
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <first_display+0x8c>)
 8001ea4:	f7fe ffbd 	bl	8000e22 <LCD_draw_text_rle>
	 HAL_Delay(3000);
 8001ea8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001eac:	f000 ff36 	bl	8002d1c <HAL_Delay>
	 LCD_clear(0x00000000, addr + LCD_L0_OFFSET);
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7fe fe7c 	bl	8000bb0 <LCD_clear>
	 LCD_clear(0x00000000, addr + LCD_L1_OFFSET);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7fe fe75 	bl	8000bb0 <LCD_clear>
	 LCD_draw_image_rle(QRcode, (480-150)/2, (272-150)/2, addr + LCD_L1_OFFSET, LCD_COLOR_NONE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	223d      	movs	r2, #61	; 0x3d
 8001ed4:	21a5      	movs	r1, #165	; 0xa5
 8001ed6:	480e      	ldr	r0, [pc, #56]	; (8001f10 <first_display+0x90>)
 8001ed8:	f7ff f840 	bl	8000f5c <LCD_draw_image_rle>
	 HAL_Delay(3000);
 8001edc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ee0:	f000 ff1c 	bl	8002d1c <HAL_Delay>
	 LCD_clear(0x00000000, addr + LCD_L0_OFFSET);
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7fe fe62 	bl	8000bb0 <LCD_clear>
	 LCD_clear(0x00000000, addr + LCD_L1_OFFSET);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe fe5b 	bl	8000bb0 <LCD_clear>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000038 	.word	0x20000038
 8001f08:	08007690 	.word	0x08007690
 8001f0c:	080076a4 	.word	0x080076a4
 8001f10:	0804ced4 	.word	0x0804ced4

08001f14 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f18:	f3bf 8f4f 	dsb	sy
}
 8001f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1e:	f3bf 8f6f 	isb	sy
}
 8001f22:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <SCB_EnableICache+0x48>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2c:	f3bf 8f4f 	dsb	sy
}
 8001f30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f32:	f3bf 8f6f 	isb	sy
}
 8001f36:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <SCB_EnableICache+0x48>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <SCB_EnableICache+0x48>)
 8001f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f42:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f44:	f3bf 8f4f 	dsb	sy
}
 8001f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f4a:	f3bf 8f6f 	isb	sy
}
 8001f4e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f66:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <SCB_EnableDCache+0x84>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f6e:	f3bf 8f4f 	dsb	sy
}
 8001f72:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <SCB_EnableDCache+0x84>)
 8001f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f7a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f84:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001f98:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f9e:	4911      	ldr	r1, [pc, #68]	; (8001fe4 <SCB_EnableDCache+0x84>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ef      	bne.n	8001f90 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	60fa      	str	r2, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e5      	bne.n	8001f86 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001fba:	f3bf 8f4f 	dsb	sy
}
 8001fbe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <SCB_EnableDCache+0x84>)
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <SCB_EnableDCache+0x84>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fcc:	f3bf 8f4f 	dsb	sy
}
 8001fd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd2:	f3bf 8f6f 	isb	sy
}
 8001fd6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001fec:	f7ff ff92 	bl	8001f14 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001ff0:	f7ff ffb6 	bl	8001f60 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff4:	f000 fe35 	bl	8002c62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff8:	f000 f812 	bl	8002020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffc:	f000 fa68 	bl	80024d0 <MX_GPIO_Init>
  MX_FMC_Init();
 8002000:	f000 fa16 	bl	8002430 <MX_FMC_Init>
  MX_LTDC_Init();
 8002004:	f000 f8e8 	bl	80021d8 <MX_LTDC_Init>
  MX_TIM6_Init();
 8002008:	f000 f9a4 	bl	8002354 <MX_TIM6_Init>
  MX_I2C1_Init();
 800200c:	f000 f8a4 	bl	8002158 <MX_I2C1_Init>
  MX_TIM7_Init();
 8002010:	f000 f9d6 	bl	80023c0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  app_Init();
 8002014:	f7ff fcfe 	bl	8001a14 <app_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_loop();
 8002018:	f7ff fd1e 	bl	8001a58 <app_loop>
 800201c:	e7fc      	b.n	8002018 <main+0x30>
	...

08002020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b4      	sub	sp, #208	; 0xd0
 8002024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800202a:	2230      	movs	r2, #48	; 0x30
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f004 feda 	bl	8006de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	2284      	movs	r2, #132	; 0x84
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f004 fecb 	bl	8006de8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <SystemClock_Config+0x130>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <SystemClock_Config+0x130>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <SystemClock_Config+0x130>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <SystemClock_Config+0x134>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a39      	ldr	r2, [pc, #228]	; (8002154 <SystemClock_Config+0x134>)
 8002070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <SystemClock_Config+0x134>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002082:	2301      	movs	r3, #1
 8002084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800208c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 800209e:	230c      	movs	r3, #12
 80020a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f93e 	bl	800533c <HAL_RCC_OscConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80020c6:	f000 fac5 	bl	8002654 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020ca:	f003 f8e7 	bl	800529c <HAL_PWREx_EnableOverDrive>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80020d4:	f000 fabe 	bl	8002654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
 80020da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80020fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020fe:	2106      	movs	r1, #6
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fbbf 	bl	8005884 <HAL_RCC_ClockConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800210c:	f000 faa2 	bl	8002654 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C1;
 8002110:	f244 0308 	movw	r3, #16392	; 0x4008
 8002114:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 55;
 8002116:	2337      	movs	r3, #55	; 0x37
 8002118:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 800211a:	2303      	movs	r3, #3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002126:	2301      	movs	r3, #1
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800212a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002130:	2300      	movs	r3, #0
 8002132:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fd45 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8002144:	f000 fa86 	bl	8002654 <Error_Handler>
  }
}
 8002148:	bf00      	nop
 800214a:	37d0      	adds	r7, #208	; 0xd0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	40007000 	.word	0x40007000

08002158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_I2C1_Init+0x74>)
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <MX_I2C1_Init+0x78>)
 8002160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_I2C1_Init+0x74>)
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <MX_I2C1_Init+0x7c>)
 8002166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_I2C1_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <MX_I2C1_Init+0x74>)
 8002170:	2201      	movs	r2, #1
 8002172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_I2C1_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <MX_I2C1_Init+0x74>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <MX_I2C1_Init+0x74>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MX_I2C1_Init+0x74>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <MX_I2C1_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002192:	480e      	ldr	r0, [pc, #56]	; (80021cc <MX_I2C1_Init+0x74>)
 8002194:	f001 fa2c 	bl	80035f0 <HAL_I2C_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800219e:	f000 fa59 	bl	8002654 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021a2:	2100      	movs	r1, #0
 80021a4:	4809      	ldr	r0, [pc, #36]	; (80021cc <MX_I2C1_Init+0x74>)
 80021a6:	f002 fd39 	bl	8004c1c <HAL_I2CEx_ConfigAnalogFilter>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021b0:	f000 fa50 	bl	8002654 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021b4:	2100      	movs	r1, #0
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_I2C1_Init+0x74>)
 80021b8:	f002 fd7b 	bl	8004cb2 <HAL_I2CEx_ConfigDigitalFilter>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021c2:	f000 fa47 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200001ec 	.word	0x200001ec
 80021d0:	40005400 	.word	0x40005400
 80021d4:	00c0eaff 	.word	0x00c0eaff

080021d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b09a      	sub	sp, #104	; 0x68
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e2:	2234      	movs	r2, #52	; 0x34
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fdfe 	bl	8006de8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80021ec:	463b      	mov	r3, r7
 80021ee:	2234      	movs	r2, #52	; 0x34
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fdf8 	bl	8006de8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <MX_LTDC_Init+0x170>)
 80021fa:	4a54      	ldr	r2, [pc, #336]	; (800234c <MX_LTDC_Init+0x174>)
 80021fc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021fe:	4b52      	ldr	r3, [pc, #328]	; (8002348 <MX_LTDC_Init+0x170>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <MX_LTDC_Init+0x170>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800220a:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <MX_LTDC_Init+0x170>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <MX_LTDC_Init+0x170>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <MX_LTDC_Init+0x170>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800221c:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <MX_LTDC_Init+0x170>)
 800221e:	2209      	movs	r2, #9
 8002220:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <MX_LTDC_Init+0x170>)
 8002224:	222b      	movs	r2, #43	; 0x2b
 8002226:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8002228:	4b47      	ldr	r3, [pc, #284]	; (8002348 <MX_LTDC_Init+0x170>)
 800222a:	2215      	movs	r2, #21
 800222c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <MX_LTDC_Init+0x170>)
 8002230:	f240 220b 	movw	r2, #523	; 0x20b
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <MX_LTDC_Init+0x170>)
 8002238:	f240 1225 	movw	r2, #293	; 0x125
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <MX_LTDC_Init+0x170>)
 8002240:	f240 2213 	movw	r2, #531	; 0x213
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <MX_LTDC_Init+0x170>)
 8002248:	f240 1229 	movw	r2, #297	; 0x129
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <MX_LTDC_Init+0x170>)
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <MX_LTDC_Init+0x170>)
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <MX_LTDC_Init+0x170>)
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002266:	4838      	ldr	r0, [pc, #224]	; (8002348 <MX_LTDC_Init+0x170>)
 8002268:	f002 fd70 	bl	8004d4c <HAL_LTDC_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002272:	f000 f9ef 	bl	8002654 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 800227a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8002284:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002288:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800228a:	2300      	movs	r3, #0
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 800228e:	23ff      	movs	r3, #255	; 0xff
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002296:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800229a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800229c:	2307      	movs	r3, #7
 800229e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80022a0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80022a4:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80022a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80022aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80022ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	481e      	ldr	r0, [pc, #120]	; (8002348 <MX_LTDC_Init+0x170>)
 80022ce:	f002 fe0d 	bl	8004eec <HAL_LTDC_ConfigLayer>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80022d8:	f000 f9bc 	bl	8002654 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 80022e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80022e4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 80022ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022ee:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 80022f4:	23ff      	movs	r3, #255	; 0xff
 80022f6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80022fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002300:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002302:	2307      	movs	r3, #7
 8002304:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xC0000000+0x400000;
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <MX_LTDC_Init+0x178>)
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 800230a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 8002310:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	2201      	movs	r2, #1
 800232c:	4619      	mov	r1, r3
 800232e:	4806      	ldr	r0, [pc, #24]	; (8002348 <MX_LTDC_Init+0x170>)
 8002330:	f002 fddc 	bl	8004eec <HAL_LTDC_ConfigLayer>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_LTDC_Init+0x166>
  {
    Error_Handler();
 800233a:	f000 f98b 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	3768      	adds	r7, #104	; 0x68
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000238 	.word	0x20000238
 800234c:	40016800 	.word	0x40016800
 8002350:	c0400000 	.word	0xc0400000

08002354 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_TIM6_Init+0x64>)
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <MX_TIM6_Init+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_TIM6_Init+0x64>)
 800236c:	2263      	movs	r2, #99	; 0x63
 800236e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_TIM6_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_TIM6_Init+0x64>)
 8002378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800237c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_TIM6_Init+0x64>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <MX_TIM6_Init+0x64>)
 8002386:	f004 f8a0 	bl	80064ca <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002390:	f000 f960 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_TIM6_Init+0x64>)
 80023a2:	f004 fb49 	bl	8006a38 <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80023ac:	f000 f952 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200002e0 	.word	0x200002e0
 80023bc:	40001000 	.word	0x40001000

080023c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <MX_TIM7_Init+0x68>)
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <MX_TIM7_Init+0x6c>)
 80023d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_TIM7_Init+0x68>)
 80023d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80023dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_TIM7_Init+0x68>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_TIM7_Init+0x68>)
 80023e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80023ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_TIM7_Init+0x68>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023f2:	480d      	ldr	r0, [pc, #52]	; (8002428 <MX_TIM7_Init+0x68>)
 80023f4:	f004 f869 	bl	80064ca <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80023fe:	f000 f929 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <MX_TIM7_Init+0x68>)
 8002410:	f004 fb12 	bl	8006a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800241a:	f000 f91b 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000360 	.word	0x20000360
 800242c:	40001400 	.word	0x40001400

08002430 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	615a      	str	r2, [r3, #20]
 8002446:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <MX_FMC_Init+0x98>)
 800244a:	4a20      	ldr	r2, [pc, #128]	; (80024cc <MX_FMC_Init+0x9c>)
 800244c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <MX_FMC_Init+0x98>)
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <MX_FMC_Init+0x98>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_FMC_Init+0x98>)
 800245c:	2204      	movs	r2, #4
 800245e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <MX_FMC_Init+0x98>)
 8002462:	2210      	movs	r2, #16
 8002464:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_FMC_Init+0x98>)
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_FMC_Init+0x98>)
 800246e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002472:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_FMC_Init+0x98>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <MX_FMC_Init+0x98>)
 800247c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002480:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_FMC_Init+0x98>)
 8002484:	2200      	movs	r2, #0
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_FMC_Init+0x98>)
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800248e:	2302      	movs	r3, #2
 8002490:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002492:	2306      	movs	r3, #6
 8002494:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002496:	2304      	movs	r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800249a:	2306      	movs	r3, #6
 800249c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800249e:	2302      	movs	r3, #2
 80024a0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <MX_FMC_Init+0x98>)
 80024b0:	f003 ff7a 	bl	80063a8 <HAL_SDRAM_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 80024ba:	f000 f8cb 	bl	8002654 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80024be:	bf00      	nop
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000032c 	.word	0x2000032c
 80024cc:	a0000140 	.word	0xa0000140

080024d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b090      	sub	sp, #64	; 0x40
 80024d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <MX_GPIO_Init+0x178>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a57      	ldr	r2, [pc, #348]	; (8002648 <MX_GPIO_Init+0x178>)
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b55      	ldr	r3, [pc, #340]	; (8002648 <MX_GPIO_Init+0x178>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b52      	ldr	r3, [pc, #328]	; (8002648 <MX_GPIO_Init+0x178>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a51      	ldr	r2, [pc, #324]	; (8002648 <MX_GPIO_Init+0x178>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b4f      	ldr	r3, [pc, #316]	; (8002648 <MX_GPIO_Init+0x178>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <MX_GPIO_Init+0x178>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <MX_GPIO_Init+0x178>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <MX_GPIO_Init+0x178>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <MX_GPIO_Init+0x178>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a45      	ldr	r2, [pc, #276]	; (8002648 <MX_GPIO_Init+0x178>)
 8002534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <MX_GPIO_Init+0x178>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002546:	4b40      	ldr	r3, [pc, #256]	; (8002648 <MX_GPIO_Init+0x178>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <MX_GPIO_Init+0x178>)
 800254c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <MX_GPIO_Init+0x178>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800255e:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <MX_GPIO_Init+0x178>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a39      	ldr	r2, [pc, #228]	; (8002648 <MX_GPIO_Init+0x178>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b37      	ldr	r3, [pc, #220]	; (8002648 <MX_GPIO_Init+0x178>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <MX_GPIO_Init+0x178>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <MX_GPIO_Init+0x178>)
 800257c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <MX_GPIO_Init+0x178>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <MX_GPIO_Init+0x178>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <MX_GPIO_Init+0x178>)
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <MX_GPIO_Init+0x178>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <MX_GPIO_Init+0x178>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a27      	ldr	r2, [pc, #156]	; (8002648 <MX_GPIO_Init+0x178>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <MX_GPIO_Init+0x178>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <MX_GPIO_Init+0x178>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a21      	ldr	r2, [pc, #132]	; (8002648 <MX_GPIO_Init+0x178>)
 80025c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_GPIO_Init+0x178>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_GPIO_Init+0x178>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <MX_GPIO_Init+0x178>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <MX_GPIO_Init+0x178>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80025ee:	2201      	movs	r2, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	4816      	ldr	r0, [pc, #88]	; (800264c <MX_GPIO_Init+0x17c>)
 80025f4:	f000 ffe2 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <MX_GPIO_Init+0x180>)
 8002600:	f000 ffdc 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002604:	2308      	movs	r3, #8
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002618:	4619      	mov	r1, r3
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <MX_GPIO_Init+0x17c>)
 800261c:	f000 fd16 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002626:	2301      	movs	r3, #1
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_GPIO_Init+0x180>)
 800263a:	f000 fd07 	bl	800304c <HAL_GPIO_Init>

}
 800263e:	bf00      	nop
 8002640:	3740      	adds	r7, #64	; 0x40
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40022800 	.word	0x40022800
 8002650:	40022000 	.word	0x40022000

08002654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002658:	b672      	cpsid	i
}
 800265a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800265c:	e7fe      	b.n	800265c <Error_Handler+0x8>
	...

08002660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_MspInit+0x44>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_MspInit+0x44>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_MspInit+0x44>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_MspInit+0x44>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_MspInit+0x44>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_MspInit+0x44>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_I2C_MspInit+0x9c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d138      	bne.n	800273c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f4:	2304      	movs	r3, #4
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4813      	ldr	r0, [pc, #76]	; (800274c <HAL_I2C_MspInit+0xa4>)
 8002700:	f000 fca4 	bl	800304c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a0f      	ldr	r2, [pc, #60]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 800270a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_I2C_MspInit+0xa0>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	201f      	movs	r0, #31
 8002722:	f000 fc1e 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002726:	201f      	movs	r0, #31
 8002728:	f000 fc37 	bl	8002f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	2020      	movs	r0, #32
 8002732:	f000 fc16 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002736:	2020      	movs	r0, #32
 8002738:	f000 fc2f 	bl	8002f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40005400 	.word	0x40005400
 8002748:	40023800 	.word	0x40023800
 800274c:	40020400 	.word	0x40020400

08002750 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_I2C_MspDeInit+0x48>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d115      	bne.n	800278e <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_I2C_MspDeInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a0d      	ldr	r2, [pc, #52]	; (800279c <HAL_I2C_MspDeInit+0x4c>)
 8002768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800276e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002772:	480b      	ldr	r0, [pc, #44]	; (80027a0 <HAL_I2C_MspDeInit+0x50>)
 8002774:	f000 fe16 	bl	80033a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800277c:	4808      	ldr	r0, [pc, #32]	; (80027a0 <HAL_I2C_MspDeInit+0x50>)
 800277e:	f000 fe11 	bl	80033a4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002782:	201f      	movs	r0, #31
 8002784:	f000 fc17 	bl	8002fb6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002788:	2020      	movs	r0, #32
 800278a:	f000 fc14 	bl	8002fb6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40005400 	.word	0x40005400
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020400 	.word	0x40020400

080027a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	; 0x38
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a51      	ldr	r2, [pc, #324]	; (8002908 <HAL_LTDC_MspInit+0x164>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f040 809b 	bne.w	80028fe <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027d2:	6453      	str	r3, [r2, #68]	; 0x44
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e0:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4a49      	ldr	r2, [pc, #292]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	6313      	str	r3, [r2, #48]	; 0x30
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027f8:	4b44      	ldr	r3, [pc, #272]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a43      	ldr	r2, [pc, #268]	; (800290c <HAL_LTDC_MspInit+0x168>)
 80027fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_LTDC_MspInit+0x168>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <HAL_LTDC_MspInit+0x168>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a3d      	ldr	r2, [pc, #244]	; (800290c <HAL_LTDC_MspInit+0x168>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_LTDC_MspInit+0x168>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_LTDC_MspInit+0x168>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a37      	ldr	r2, [pc, #220]	; (800290c <HAL_LTDC_MspInit+0x168>)
 800282e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_LTDC_MspInit+0x168>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_LTDC_MspInit+0x168>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4a31      	ldr	r2, [pc, #196]	; (800290c <HAL_LTDC_MspInit+0x168>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	6313      	str	r3, [r2, #48]	; 0x30
 800284c:	4b2f      	ldr	r3, [pc, #188]	; (800290c <HAL_LTDC_MspInit+0x168>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002858:	2310      	movs	r3, #16
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002868:	230e      	movs	r3, #14
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	4827      	ldr	r0, [pc, #156]	; (8002910 <HAL_LTDC_MspInit+0x16c>)
 8002874:	f000 fbea 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8002878:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800288a:	230e      	movs	r3, #14
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	4619      	mov	r1, r3
 8002894:	481f      	ldr	r0, [pc, #124]	; (8002914 <HAL_LTDC_MspInit+0x170>)
 8002896:	f000 fbd9 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800289a:	23f7      	movs	r3, #247	; 0xf7
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028aa:	230e      	movs	r3, #14
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80028ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b2:	4619      	mov	r1, r3
 80028b4:	4818      	ldr	r0, [pc, #96]	; (8002918 <HAL_LTDC_MspInit+0x174>)
 80028b6:	f000 fbc9 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028cc:	2309      	movs	r3, #9
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	4811      	ldr	r0, [pc, #68]	; (800291c <HAL_LTDC_MspInit+0x178>)
 80028d8:	f000 fbb8 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80028dc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028ee:	230e      	movs	r3, #14
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	4619      	mov	r1, r3
 80028f8:	4809      	ldr	r0, [pc, #36]	; (8002920 <HAL_LTDC_MspInit+0x17c>)
 80028fa:	f000 fba7 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80028fe:	bf00      	nop
 8002900:	3738      	adds	r7, #56	; 0x38
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40016800 	.word	0x40016800
 800290c:	40023800 	.word	0x40023800
 8002910:	40021000 	.word	0x40021000
 8002914:	40022400 	.word	0x40022400
 8002918:	40022800 	.word	0x40022800
 800291c:	40021800 	.word	0x40021800
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_TIM_Base_MspInit+0x78>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d114      	bne.n	8002960 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_TIM_Base_MspInit+0x7c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_TIM_Base_MspInit+0x7c>)
 800293c:	f043 0310 	orr.w	r3, r3, #16
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_TIM_Base_MspInit+0x7c>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	2036      	movs	r0, #54	; 0x36
 8002954:	f000 fb05 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002958:	2036      	movs	r0, #54	; 0x36
 800295a:	f000 fb1e 	bl	8002f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800295e:	e018      	b.n	8002992 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_TIM_Base_MspInit+0x80>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_Base_MspInit+0x7c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_TIM_Base_MspInit+0x7c>)
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_TIM_Base_MspInit+0x7c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	2037      	movs	r0, #55	; 0x37
 8002988:	f000 faeb 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800298c:	2037      	movs	r0, #55	; 0x37
 800298e:	f000 fb04 	bl	8002f9a <HAL_NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40001000 	.word	0x40001000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40001400 	.word	0x40001400

080029a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029bc:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <HAL_FMC_MspInit+0x100>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d16d      	bne.n	8002aa0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029c4:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_FMC_MspInit+0x100>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_FMC_MspInit+0x104>)
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <HAL_FMC_MspInit+0x104>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6393      	str	r3, [r2, #56]	; 0x38
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_FMC_MspInit+0x104>)
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80029e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f4:	230c      	movs	r3, #12
 80029f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	482c      	ldr	r0, [pc, #176]	; (8002ab0 <HAL_FMC_MspInit+0x108>)
 80029fe:	f000 fb25 	bl	800304c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002a02:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a14:	230c      	movs	r3, #12
 8002a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4825      	ldr	r0, [pc, #148]	; (8002ab4 <HAL_FMC_MspInit+0x10c>)
 8002a1e:	f000 fb15 	bl	800304c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002a22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a34:	230c      	movs	r3, #12
 8002a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	481e      	ldr	r0, [pc, #120]	; (8002ab8 <HAL_FMC_MspInit+0x110>)
 8002a3e:	f000 fb05 	bl	800304c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a54:	230c      	movs	r3, #12
 8002a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4817      	ldr	r0, [pc, #92]	; (8002abc <HAL_FMC_MspInit+0x114>)
 8002a5e:	f000 faf5 	bl	800304c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8002a62:	2328      	movs	r3, #40	; 0x28
 8002a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a72:	230c      	movs	r3, #12
 8002a74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <HAL_FMC_MspInit+0x118>)
 8002a7c:	f000 fae6 	bl	800304c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a80:	2308      	movs	r3, #8
 8002a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a90:	230c      	movs	r3, #12
 8002a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <HAL_FMC_MspInit+0x11c>)
 8002a9a:	f000 fad7 	bl	800304c <HAL_GPIO_Init>
 8002a9e:	e000      	b.n	8002aa2 <HAL_FMC_MspInit+0xfa>
    return;
 8002aa0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2000018c 	.word	0x2000018c
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40021800 	.word	0x40021800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40020800 	.word	0x40020800

08002ac8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ad0:	f7ff ff6a 	bl	80029a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <MemManage_Handler+0x4>

08002aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <BusFault_Handler+0x4>

08002af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <UsageFault_Handler+0x4>

08002afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b28:	f000 f8d8 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <I2C1_EV_IRQHandler+0x10>)
 8002b36:	f001 f849 	bl	8003bcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200001ec 	.word	0x200001ec

08002b44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <I2C1_ER_IRQHandler+0x10>)
 8002b4a:	f001 f859 	bl	8003c00 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200001ec 	.word	0x200001ec

08002b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM6_DAC_IRQHandler+0x10>)
 8002b5e:	f003 fd83 	bl	8006668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200002e0 	.word	0x200002e0

08002b6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <TIM7_IRQHandler+0x10>)
 8002b72:	f003 fd79 	bl	8006668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000360 	.word	0x20000360

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f004 f8f0 	bl	8006d94 <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20050000 	.word	0x20050000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	20000190 	.word	0x20000190
 8002be8:	200003c0 	.word	0x200003c0

08002bec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <SystemInit+0x20>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <SystemInit+0x20>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c1c:	e002      	b.n	8002c24 <LoopCopyDataInit>

08002c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c22:	3304      	adds	r3, #4

08002c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c28:	d3f9      	bcc.n	8002c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c2c:	4c0b      	ldr	r4, [pc, #44]	; (8002c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c30:	e001      	b.n	8002c36 <LoopFillZerobss>

08002c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c34:	3204      	adds	r2, #4

08002c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c38:	d3fb      	bcc.n	8002c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c3a:	f7ff ffd7 	bl	8002bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f004 f8af 	bl	8006da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7ff f9d1 	bl	8001fe8 <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002c54:	08056b5c 	.word	0x08056b5c
  ldr r2, =_sbss
 8002c58:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002c5c:	200003c0 	.word	0x200003c0

08002c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC_IRQHandler>

08002c62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c66:	2003      	movs	r0, #3
 8002c68:	f000 f970 	bl	8002f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6c:	200f      	movs	r0, #15
 8002c6e:	f000 f805 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c72:	f7ff fcf5 	bl	8002660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f999 	bl	8002fd2 <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb8:	f000 f953 	bl	8002f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000028 	.word	0x20000028
 8002cd4:	20000048 	.word	0x20000048
 8002cd8:	20000044 	.word	0x20000044

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000048 	.word	0x20000048
 8002d00:	200003ac 	.word	0x200003ac

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	200003ac 	.word	0x200003ac

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000048 	.word	0x20000048

08002d64 <__NVIC_SetPriorityGrouping>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <__NVIC_SetPriorityGrouping+0x40>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <__NVIC_SetPriorityGrouping+0x40>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00
 8002da8:	05fa0000 	.word	0x05fa0000

08002dac <__NVIC_GetPriorityGrouping>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_DisableIRQ>:
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db12      	blt.n	8002e3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	490a      	ldr	r1, [pc, #40]	; (8002e48 <__NVIC_DisableIRQ+0x44>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	3320      	adds	r3, #32
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e30:	f3bf 8f4f 	dsb	sy
}
 8002e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e36:	f3bf 8f6f 	isb	sy
}
 8002e3a:	bf00      	nop
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	d301      	bcc.n	8002f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00f      	b.n	8002f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <SysTick_Config+0x40>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f26:	210f      	movs	r1, #15
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2c:	f7ff ff8e 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <SysTick_Config+0x40>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <SysTick_Config+0x40>)
 8002f38:	2207      	movs	r2, #7
 8002f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000e010 	.word	0xe000e010

08002f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff05 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f74:	f7ff ff1a 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7ff ff8e 	bl	8002ea0 <NVIC_EncodePriority>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff5d 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff0d 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff1d 	bl	8002e04 <__NVIC_DisableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff94 	bl	8002f08 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d004      	beq.n	8003008 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e00c      	b.n	8003022 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2205      	movs	r2, #5
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303c:	b2db      	uxtb	r3, r3
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e175      	b.n	8003358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	429a      	cmp	r2, r3
 8003086:	f040 8164 	bne.w	8003352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d005      	beq.n	80030a2 <HAL_GPIO_Init+0x56>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d130      	bne.n	8003104 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d8:	2201      	movs	r2, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 0201 	and.w	r2, r3, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b03      	cmp	r3, #3
 800310e:	d017      	beq.n	8003140 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d123      	bne.n	8003194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	08da      	lsrs	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3208      	adds	r2, #8
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	08da      	lsrs	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3208      	adds	r2, #8
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0203 	and.w	r2, r3, #3
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80be 	beq.w	8003352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d6:	4b66      	ldr	r3, [pc, #408]	; (8003370 <HAL_GPIO_Init+0x324>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_GPIO_Init+0x324>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_GPIO_Init+0x324>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031ee:	4a61      	ldr	r2, [pc, #388]	; (8003374 <HAL_GPIO_Init+0x328>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a58      	ldr	r2, [pc, #352]	; (8003378 <HAL_GPIO_Init+0x32c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d037      	beq.n	800328a <HAL_GPIO_Init+0x23e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_GPIO_Init+0x330>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_GPIO_Init+0x23a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_GPIO_Init+0x334>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02b      	beq.n	8003282 <HAL_GPIO_Init+0x236>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_GPIO_Init+0x338>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d025      	beq.n	800327e <HAL_GPIO_Init+0x232>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_GPIO_Init+0x33c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <HAL_GPIO_Init+0x22e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <HAL_GPIO_Init+0x340>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d019      	beq.n	8003276 <HAL_GPIO_Init+0x22a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_GPIO_Init+0x344>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0x226>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_GPIO_Init+0x348>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_Init+0x222>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_GPIO_Init+0x34c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_Init+0x21e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	; (800339c <HAL_GPIO_Init+0x350>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_Init+0x21a>
 8003262:	2309      	movs	r3, #9
 8003264:	e012      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003266:	230a      	movs	r3, #10
 8003268:	e010      	b.n	800328c <HAL_GPIO_Init+0x240>
 800326a:	2308      	movs	r3, #8
 800326c:	e00e      	b.n	800328c <HAL_GPIO_Init+0x240>
 800326e:	2307      	movs	r3, #7
 8003270:	e00c      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003272:	2306      	movs	r3, #6
 8003274:	e00a      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003276:	2305      	movs	r3, #5
 8003278:	e008      	b.n	800328c <HAL_GPIO_Init+0x240>
 800327a:	2304      	movs	r3, #4
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x240>
 800327e:	2303      	movs	r3, #3
 8003280:	e004      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003282:	2302      	movs	r3, #2
 8003284:	e002      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_GPIO_Init+0x240>
 800328a:	2300      	movs	r3, #0
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f002 0203 	and.w	r2, r2, #3
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	4093      	lsls	r3, r2
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800329c:	4935      	ldr	r1, [pc, #212]	; (8003374 <HAL_GPIO_Init+0x328>)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_GPIO_Init+0x354>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ce:	4a34      	ldr	r2, [pc, #208]	; (80033a0 <HAL_GPIO_Init+0x354>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_GPIO_Init+0x354>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <HAL_GPIO_Init+0x354>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032fe:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_GPIO_Init+0x354>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003322:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <HAL_GPIO_Init+0x354>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_GPIO_Init+0x354>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_GPIO_Init+0x354>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	f67f ae86 	bls.w	800306c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	40013800 	.word	0x40013800
 8003378:	40020000 	.word	0x40020000
 800337c:	40020400 	.word	0x40020400
 8003380:	40020800 	.word	0x40020800
 8003384:	40020c00 	.word	0x40020c00
 8003388:	40021000 	.word	0x40021000
 800338c:	40021400 	.word	0x40021400
 8003390:	40021800 	.word	0x40021800
 8003394:	40021c00 	.word	0x40021c00
 8003398:	40022000 	.word	0x40022000
 800339c:	40022400 	.word	0x40022400
 80033a0:	40013c00 	.word	0x40013c00

080033a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e0d9      	b.n	8003574 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033c0:	2201      	movs	r2, #1
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	f040 80c9 	bne.w	800356e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_GPIO_DeInit+0x1e8>)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a63      	ldr	r2, [pc, #396]	; (8003590 <HAL_GPIO_DeInit+0x1ec>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d037      	beq.n	8003476 <HAL_GPIO_DeInit+0xd2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a62      	ldr	r2, [pc, #392]	; (8003594 <HAL_GPIO_DeInit+0x1f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_GPIO_DeInit+0xce>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a61      	ldr	r2, [pc, #388]	; (8003598 <HAL_GPIO_DeInit+0x1f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <HAL_GPIO_DeInit+0xca>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_GPIO_DeInit+0x1f8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d025      	beq.n	800346a <HAL_GPIO_DeInit+0xc6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a5f      	ldr	r2, [pc, #380]	; (80035a0 <HAL_GPIO_DeInit+0x1fc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <HAL_GPIO_DeInit+0xc2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a5e      	ldr	r2, [pc, #376]	; (80035a4 <HAL_GPIO_DeInit+0x200>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d019      	beq.n	8003462 <HAL_GPIO_DeInit+0xbe>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a5d      	ldr	r2, [pc, #372]	; (80035a8 <HAL_GPIO_DeInit+0x204>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_DeInit+0xba>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_GPIO_DeInit+0x208>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00d      	beq.n	800345a <HAL_GPIO_DeInit+0xb6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a5b      	ldr	r2, [pc, #364]	; (80035b0 <HAL_GPIO_DeInit+0x20c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_DeInit+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a5a      	ldr	r2, [pc, #360]	; (80035b4 <HAL_GPIO_DeInit+0x210>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_GPIO_DeInit+0xae>
 800344e:	2309      	movs	r3, #9
 8003450:	e012      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 8003452:	230a      	movs	r3, #10
 8003454:	e010      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 8003456:	2308      	movs	r3, #8
 8003458:	e00e      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 800345a:	2307      	movs	r3, #7
 800345c:	e00c      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 800345e:	2306      	movs	r3, #6
 8003460:	e00a      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 8003462:	2305      	movs	r3, #5
 8003464:	e008      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 8003466:	2304      	movs	r3, #4
 8003468:	e006      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_DeInit+0xd4>
 8003476:	2300      	movs	r3, #0
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	d132      	bne.n	80034ee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	4949      	ldr	r1, [pc, #292]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 8003492:	4013      	ands	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003496:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43db      	mvns	r3, r3
 800349e:	4946      	ldr	r1, [pc, #280]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034a4:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	4942      	ldr	r1, [pc, #264]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	493f      	ldr	r1, [pc, #252]	; (80035b8 <HAL_GPIO_DeInit+0x214>)
 80034bc:	4013      	ands	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80034d0:	4a2e      	ldr	r2, [pc, #184]	; (800358c <HAL_GPIO_DeInit+0x1e8>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	43da      	mvns	r2, r3
 80034e0:	482a      	ldr	r0, [pc, #168]	; (800358c <HAL_GPIO_DeInit+0x1e8>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	400a      	ands	r2, r1
 80034e8:	3302      	adds	r3, #2
 80034ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2103      	movs	r1, #3
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	08d2      	lsrs	r2, r2, #3
 8003524:	4019      	ands	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2103      	movs	r1, #3
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2101      	movs	r1, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2103      	movs	r1, #3
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	401a      	ands	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3301      	adds	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b0f      	cmp	r3, #15
 8003578:	f67f af22 	bls.w	80033c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40013800 	.word	0x40013800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40021400 	.word	0x40021400
 80035a8:	40021800 	.word	0x40021800
 80035ac:	40021c00 	.word	0x40021c00
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40022400 	.word	0x40022400
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035d8:	e003      	b.n	80035e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	041a      	lsls	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	619a      	str	r2, [r3, #24]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07f      	b.n	8003702 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff f846 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e006      	b.n	8003678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d104      	bne.n	800368a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_I2C_Init+0x11c>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	02008000 	.word	0x02008000

08003710 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e021      	b.n	8003766 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2224      	movs	r2, #36	; 0x24
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff f808 	bl	8002750 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 80f9 	bne.w	800398a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x34>
 800379e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0ed      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Mem_Write+0x4e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0e6      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037c6:	f7ff fa9d 	bl	8002d04 <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2319      	movs	r3, #25
 80037d2:	2201      	movs	r2, #1
 80037d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 ffe6 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d1      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2221      	movs	r2, #33	; 0x21
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003810:	88f8      	ldrh	r0, [r7, #6]
 8003812:	893a      	ldrh	r2, [r7, #8]
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4603      	mov	r3, r0
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fb9f 	bl	8003f64 <I2C_RequestMemoryWrite>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0a9      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2bff      	cmp	r3, #255	; 0xff
 8003840:	d90e      	bls.n	8003860 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22ff      	movs	r2, #255	; 0xff
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	b2da      	uxtb	r2, r3
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f001 f94f 	bl	8004afc <I2C_TransferConfig>
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f001 f93e 	bl	8004afc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 ffd0 	bl	800482a <I2C_WaitOnTXISFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e07b      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d034      	beq.n	8003938 <HAL_I2C_Mem_Write+0x1c8>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d130      	bne.n	8003938 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 ff62 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e04d      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d90e      	bls.n	8003918 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	b2da      	uxtb	r2, r3
 8003906:	8979      	ldrh	r1, [r7, #10]
 8003908:	2300      	movs	r3, #0
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f001 f8f3 	bl	8004afc <I2C_TransferConfig>
 8003916:	e00f      	b.n	8003938 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	b2da      	uxtb	r2, r3
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 f8e2 	bl	8004afc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d19e      	bne.n	8003880 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 ffaf 	bl	80048aa <I2C_WaitOnSTOPFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e01a      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2220      	movs	r2, #32
 800395c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_I2C_Mem_Write+0x224>)
 800396a:	400b      	ands	r3, r1
 800396c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	fe00e800 	.word	0xfe00e800

08003998 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	817b      	strh	r3, [r7, #10]
 80039aa:	460b      	mov	r3, r1
 80039ac:	813b      	strh	r3, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f040 80fd 	bne.w	8003bba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_I2C_Mem_Read+0x34>
 80039c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0f1      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_I2C_Mem_Read+0x4e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0ea      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ee:	f7ff f989 	bl	8002d04 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2319      	movs	r3, #25
 80039fa:	2201      	movs	r2, #1
 80039fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fed2 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0d5      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	; 0x22
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a38:	88f8      	ldrh	r0, [r7, #6]
 8003a3a:	893a      	ldrh	r2, [r7, #8]
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	4603      	mov	r3, r0
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fadf 	bl	800400c <I2C_RequestMemoryRead>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0ad      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2bff      	cmp	r3, #255	; 0xff
 8003a68:	d90e      	bls.n	8003a88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	8979      	ldrh	r1, [r7, #10]
 8003a78:	4b52      	ldr	r3, [pc, #328]	; (8003bc4 <HAL_I2C_Mem_Read+0x22c>)
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f001 f83b 	bl	8004afc <I2C_TransferConfig>
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	8979      	ldrh	r1, [r7, #10]
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <HAL_I2C_Mem_Read+0x22c>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f001 f82a 	bl	8004afc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fe79 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07c      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d034      	beq.n	8003b68 <HAL_I2C_Mem_Read+0x1d0>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d130      	bne.n	8003b68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fe4a 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e04d      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2bff      	cmp	r3, #255	; 0xff
 8003b28:	d90e      	bls.n	8003b48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	8979      	ldrh	r1, [r7, #10]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 ffdb 	bl	8004afc <I2C_TransferConfig>
 8003b46:	e00f      	b.n	8003b68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 ffca 	bl	8004afc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d19a      	bne.n	8003aa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fe97 	bl	80048aa <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e01a      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_I2C_Mem_Read+0x230>)
 8003b9a:	400b      	ands	r3, r1
 8003b9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	80002400 	.word	0x80002400
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	09db      	lsrs	r3, r3, #7
 8003c28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	0a9b      	lsrs	r3, r3, #10
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	09db      	lsrs	r3, r3, #7
 8003c56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f043 0208 	orr.w	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	0a5b      	lsrs	r3, r3, #9
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d010      	beq.n	8003ca2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 030b 	and.w	r3, r3, #11
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fc3f 	bl	8004538 <I2C_ITError>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	70fb      	strb	r3, [r7, #3]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <I2C_Slave_ISR_IT+0x24>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0ec      	b.n	8003f5c <I2C_Slave_ISR_IT+0x1fe>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003da2:	6939      	ldr	r1, [r7, #16]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fa67 	bl	8004278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04d      	beq.n	8003e52 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d047      	beq.n	8003e52 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d128      	bne.n	8003e1e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b28      	cmp	r3, #40	; 0x28
 8003dd6:	d108      	bne.n	8003dea <I2C_Slave_ISR_IT+0x8c>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dde:	d104      	bne.n	8003dea <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003de0:	6939      	ldr	r1, [r7, #16]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fb52 	bl	800448c <I2C_ITListenCplt>
 8003de8:	e032      	b.n	8003e50 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b29      	cmp	r3, #41	; 0x29
 8003df4:	d10e      	bne.n	8003e14 <I2C_Slave_ISR_IT+0xb6>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dfc:	d00a      	beq.n	8003e14 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2210      	movs	r2, #16
 8003e04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fc8d 	bl	8004726 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f9d5 	bl	80041bc <I2C_ITSlaveSeqCplt>
 8003e12:	e01d      	b.n	8003e50 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e1c:	e096      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <I2C_Slave_ISR_IT+0xe4>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e3e:	f040 8085 	bne.w	8003f4c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4619      	mov	r1, r3
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fb75 	bl	8004538 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003e4e:	e07d      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1ee>
 8003e50:	e07c      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d030      	beq.n	8003ec0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02a      	beq.n	8003ec0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d018      	beq.n	8003ea6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d14f      	bne.n	8003f50 <I2C_Slave_ISR_IT+0x1f2>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb6:	d04b      	beq.n	8003f50 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f97f 	bl	80041bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003ebe:	e047      	b.n	8003f50 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	08db      	lsrs	r3, r3, #3
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	08db      	lsrs	r3, r3, #3
 8003ed0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f8ea 	bl	80040b4 <I2C_ITAddrCplt>
 8003ee0:	e037      	b.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d031      	beq.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02b      	beq.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d018      	beq.n	8003f36 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f34:	e00d      	b.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3c:	d002      	beq.n	8003f44 <I2C_Slave_ISR_IT+0x1e6>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f939 	bl	80041bc <I2C_ITSlaveSeqCplt>
 8003f4a:	e002      	b.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003f4c:	bf00      	nop
 8003f4e:	e000      	b.n	8003f52 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003f50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	460b      	mov	r3, r1
 8003f78:	813b      	strh	r3, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	8979      	ldrh	r1, [r7, #10]
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <I2C_RequestMemoryWrite+0xa4>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fdb5 	bl	8004afc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fc47 	bl	800482a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e02c      	b.n	8004000 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb6:	e015      	b.n	8003fe4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	69b9      	ldr	r1, [r7, #24]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fc2d 	bl	800482a <I2C_WaitOnTXISFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e012      	b.n	8004000 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fbdb 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	80002000 	.word	0x80002000

0800400c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	817b      	strh	r3, [r7, #10]
 800401e:	460b      	mov	r3, r1
 8004020:	813b      	strh	r3, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <I2C_RequestMemoryRead+0xa4>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fd62 	bl	8004afc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fbf4 	bl	800482a <I2C_WaitOnTXISFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e02c      	b.n	80040a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d105      	bne.n	800405e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004052:	893b      	ldrh	r3, [r7, #8]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
 800405c:	e015      	b.n	800408a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	b29b      	uxth	r3, r3
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fbda 	bl	800482a <I2C_WaitOnTXISFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e012      	b.n	80040a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2200      	movs	r2, #0
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fb88 	bl	80047aa <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	80002000 	.word	0x80002000

080040b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ca:	2b28      	cmp	r3, #40	; 0x28
 80040cc:	d16a      	bne.n	80041a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80040ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004108:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d138      	bne.n	8004184 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	09db      	lsrs	r3, r3, #7
 8004116:	b29a      	uxth	r2, r3
 8004118:	89bb      	ldrh	r3, [r7, #12]
 800411a:	4053      	eors	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	f003 0306 	and.w	r3, r3, #6
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11c      	bne.n	8004160 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004138:	2b02      	cmp	r3, #2
 800413a:	d13b      	bne.n	80041b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2208      	movs	r2, #8
 8004148:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004152:	89ba      	ldrh	r2, [r7, #12]
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fdc6 	bl	8003cea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800415e:	e029      	b.n	80041b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004160:	893b      	ldrh	r3, [r7, #8]
 8004162:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fcf9 	bl	8004b60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004176:	89ba      	ldrh	r2, [r7, #12]
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fdb4 	bl	8003cea <HAL_I2C_AddrCallback>
}
 8004182:	e017      	b.n	80041b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fce9 	bl	8004b60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004196:	89ba      	ldrh	r2, [r7, #12]
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fda4 	bl	8003cea <HAL_I2C_AddrCallback>
}
 80041a2:	e007      	b.n	80041b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	0b9b      	lsrs	r3, r3, #14
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e00d      	b.n	800420e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	0bdb      	lsrs	r3, r3, #15
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800420c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b29      	cmp	r3, #41	; 0x29
 8004218:	d112      	bne.n	8004240 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2228      	movs	r2, #40	; 0x28
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004228:	2101      	movs	r1, #1
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fc98 	bl	8004b60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fd42 	bl	8003cc2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800423e:	e017      	b.n	8004270 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	d111      	bne.n	8004270 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2228      	movs	r2, #40	; 0x28
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2222      	movs	r2, #34	; 0x22
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800425a:	2102      	movs	r1, #2
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fc7f 	bl	8004b60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fd33 	bl	8003cd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004294:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2220      	movs	r2, #32
 800429c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b21      	cmp	r3, #33	; 0x21
 80042a2:	d002      	beq.n	80042aa <I2C_ITSlaveCplt+0x32>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b29      	cmp	r3, #41	; 0x29
 80042a8:	d108      	bne.n	80042bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042aa:	f248 0101 	movw	r1, #32769	; 0x8001
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fc56 	bl	8004b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2221      	movs	r2, #33	; 0x21
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ba:	e00d      	b.n	80042d8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b22      	cmp	r3, #34	; 0x22
 80042c0:	d002      	beq.n	80042c8 <I2C_ITSlaveCplt+0x50>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b2a      	cmp	r3, #42	; 0x2a
 80042c6:	d107      	bne.n	80042d8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fc47 	bl	8004b60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2222      	movs	r2, #34	; 0x22
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b64      	ldr	r3, [pc, #400]	; (8004484 <I2C_ITSlaveCplt+0x20c>)
 80042f4:	400b      	ands	r3, r1
 80042f6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa14 	bl	8004726 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	0b9b      	lsrs	r3, r3, #14
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004318:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004330:	e018      	b.n	8004364 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	0bdb      	lsrs	r3, r3, #15
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d012      	beq.n	8004364 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0304 	bic.w	r3, r3, #4
 8004376:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8a7 	bl	8004538 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b28      	cmp	r3, #40	; 0x28
 80043f4:	d141      	bne.n	800447a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f847 	bl	800448c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043fe:	e03c      	b.n	800447a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004408:	d014      	beq.n	8004434 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fed6 	bl	80041bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <I2C_ITSlaveCplt+0x210>)
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fc6a 	bl	8003d06 <HAL_I2C_ListenCpltCallback>
}
 8004432:	e022      	b.n	800447a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b22      	cmp	r3, #34	; 0x22
 800443e:	d10e      	bne.n	800445e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fc3d 	bl	8003cd6 <HAL_I2C_SlaveRxCpltCallback>
}
 800445c:	e00d      	b.n	800447a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fc24 	bl	8003cc2 <HAL_I2C_SlaveTxCpltCallback>
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	fe00e800 	.word	0xfe00e800
 8004488:	ffff0000 	.word	0xffff0000

0800448c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a26      	ldr	r2, [pc, #152]	; (8004534 <I2C_ITListenCplt+0xa8>)
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d022      	beq.n	800450a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d012      	beq.n	800450a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800450a:	f248 0103 	movw	r1, #32771	; 0x8003
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fb26 	bl	8004b60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2210      	movs	r2, #16
 800451a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fbee 	bl	8003d06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	ffff0000 	.word	0xffff0000

08004538 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <I2C_ITError+0x194>)
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b28      	cmp	r3, #40	; 0x28
 800456e:	d005      	beq.n	800457c <I2C_ITError+0x44>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b29      	cmp	r3, #41	; 0x29
 8004574:	d002      	beq.n	800457c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b2a      	cmp	r3, #42	; 0x2a
 800457a:	d10b      	bne.n	8004594 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800457c:	2103      	movs	r1, #3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 faee 	bl	8004b60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2228      	movs	r2, #40	; 0x28
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a50      	ldr	r2, [pc, #320]	; (80046d0 <I2C_ITError+0x198>)
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
 8004592:	e011      	b.n	80045b8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004594:	f248 0103 	movw	r1, #32771	; 0x8003
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fae1 	bl	8004b60 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b60      	cmp	r3, #96	; 0x60
 80045a8:	d003      	beq.n	80045b2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d039      	beq.n	800463a <I2C_ITError+0x102>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b11      	cmp	r3, #17
 80045ca:	d002      	beq.n	80045d2 <I2C_ITError+0x9a>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b21      	cmp	r3, #33	; 0x21
 80045d0:	d133      	bne.n	800463a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e0:	d107      	bne.n	80045f2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fd19 	bl	800302e <HAL_DMA_GetState>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d017      	beq.n	8004632 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4a33      	ldr	r2, [pc, #204]	; (80046d4 <I2C_ITError+0x19c>)
 8004608:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fce7 	bl	8002fea <HAL_DMA_Abort_IT>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04d      	beq.n	80046be <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800462c:	4610      	mov	r0, r2
 800462e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004630:	e045      	b.n	80046be <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f850 	bl	80046d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004638:	e041      	b.n	80046be <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d039      	beq.n	80046b6 <I2C_ITError+0x17e>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b12      	cmp	r3, #18
 8004646:	d002      	beq.n	800464e <I2C_ITError+0x116>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b22      	cmp	r3, #34	; 0x22
 800464c:	d133      	bne.n	80046b6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d107      	bne.n	800466e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800466c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fcdb 	bl	800302e <HAL_DMA_GetState>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d017      	beq.n	80046ae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <I2C_ITError+0x19c>)
 8004684:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fca9 	bl	8002fea <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d011      	beq.n	80046c2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046a8:	4610      	mov	r0, r2
 80046aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ac:	e009      	b.n	80046c2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f812 	bl	80046d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046b4:	e005      	b.n	80046c2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f80e 	bl	80046d8 <I2C_TreatErrorCallback>
  }
}
 80046bc:	e002      	b.n	80046c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046c2:	bf00      	nop
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	08003d5f 	.word	0x08003d5f
 80046d4:	0800476f 	.word	0x0800476f

080046d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d10e      	bne.n	800470a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fb13 	bl	8003d2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004708:	e009      	b.n	800471e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fafe 	bl	8003d1a <HAL_I2C_ErrorCallback>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d103      	bne.n	8004744 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d007      	beq.n	8004762 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	619a      	str	r2, [r3, #24]
  }
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	2200      	movs	r2, #0
 800478a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	2200      	movs	r2, #0
 800479a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff ff9b 	bl	80046d8 <I2C_TreatErrorCallback>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ba:	e022      	b.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c2:	d01e      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c4:	f7fe fa9e 	bl	8002d04 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <I2C_WaitOnFlagUntilTimeout+0x30>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d113      	bne.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e00f      	b.n	8004822 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	429a      	cmp	r2, r3
 800481e:	d0cd      	beq.n	80047bc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004836:	e02c      	b.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f871 	bl	8004924 <I2C_IsErrorOccurred>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e02a      	b.n	80048a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004852:	d01e      	beq.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004854:	f7fe fa56 	bl	8002d04 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d113      	bne.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e007      	b.n	80048a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	d1cb      	bne.n	8004838 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b6:	e028      	b.n	800490a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f831 	bl	8004924 <I2C_IsErrorOccurred>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e026      	b.n	800491a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048cc:	f7fe fa1a 	bl	8002d04 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d113      	bne.n	800490a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e007      	b.n	800491a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d1cf      	bne.n	80048b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d075      	beq.n	8004a3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2210      	movs	r2, #16
 8004956:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004958:	e056      	b.n	8004a08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004960:	d052      	beq.n	8004a08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fe f9cf 	bl	8002d04 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <I2C_IsErrorOccurred+0x54>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d147      	bne.n	8004a08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800498a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d12e      	bne.n	80049fa <I2C_IsErrorOccurred+0xd6>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a2:	d02a      	beq.n	80049fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d027      	beq.n	80049fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049ba:	f7fe f9a3 	bl	8002d04 <HAL_GetTick>
 80049be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c0:	e01b      	b.n	80049fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049c2:	f7fe f99f 	bl	8002d04 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b19      	cmp	r3, #25
 80049ce:	d914      	bls.n	80049fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d1dc      	bne.n	80049c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d003      	beq.n	8004a1e <I2C_IsErrorOccurred+0xfa>
 8004a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d09d      	beq.n	800495a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f043 0304 	orr.w	r3, r3, #4
 8004a34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	f043 0308 	orr.w	r3, r3, #8
 8004a76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f043 0302 	orr.w	r3, r3, #2
 8004a98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01c      	beq.n	8004aec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff fe37 	bl	8004726 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <I2C_IsErrorOccurred+0x1d4>)
 8004ac4:	400b      	ands	r3, r1
 8004ac6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	fe00e800 	.word	0xfe00e800

08004afc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b14:	7a7b      	ldrb	r3, [r7, #9]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b1c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b2a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	0d5b      	lsrs	r3, r3, #21
 8004b36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <I2C_TransferConfig+0x60>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	ea02 0103 	and.w	r1, r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	03ff63ff 	.word	0x03ff63ff

08004b60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00f      	beq.n	8004b9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004b80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b8e:	2b28      	cmp	r3, #40	; 0x28
 8004b90:	d003      	beq.n	8004b9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004b98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b9a:	887b      	ldrh	r3, [r7, #2]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00f      	beq.n	8004bc4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004baa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bb8:	2b28      	cmp	r3, #40	; 0x28
 8004bba:	d003      	beq.n	8004bc4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004bc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	da03      	bge.n	8004bd4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004bd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d103      	bne.n	8004be2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d103      	bne.n	8004bf0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d103      	bne.n	8004bfe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d138      	bne.n	8004ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e032      	b.n	8004ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d139      	bne.n	8004d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e033      	b.n	8004d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2224      	movs	r2, #36	; 0x24
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0bf      	b.n	8004ede <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd fd16 	bl	80027a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004d8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6999      	ldr	r1, [r3, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004da4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ee8 <HAL_LTDC_Init+0x19c>)
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68d9      	ldr	r1, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b3e      	ldr	r3, [pc, #248]	; (8004ee8 <HAL_LTDC_Init+0x19c>)
 8004dee:	400b      	ands	r3, r1
 8004df0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68d9      	ldr	r1, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6919      	ldr	r1, [r3, #16]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_LTDC_Init+0x19c>)
 8004e1c:	400b      	ands	r3, r1
 8004e1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6919      	ldr	r1, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6959      	ldr	r1, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <HAL_LTDC_Init+0x19c>)
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6959      	ldr	r1, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0206 	orr.w	r2, r2, #6
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	f000f800 	.word	0xf000f800

08004eec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004eec:	b5b0      	push	{r4, r5, r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_LTDC_ConfigLayer+0x1a>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e02c      	b.n	8004f60 <HAL_LTDC_ConfigLayer+0x74>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2134      	movs	r1, #52	; 0x34
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f811 	bl	8004f68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bdb0      	pop	{r4, r5, r7, pc}

08004f68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	4413      	add	r3, r2
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	01db      	lsls	r3, r3, #7
 8004f94:	4413      	add	r3, r2
 8004f96:	3384      	adds	r3, #132	; 0x84
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	01d2      	lsls	r2, r2, #7
 8004fa4:	440a      	add	r2, r1
 8004fa6:	3284      	adds	r2, #132	; 0x84
 8004fa8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	4413      	add	r3, r2
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	01db      	lsls	r3, r3, #7
 8004fcc:	440b      	add	r3, r1
 8004fce:	3384      	adds	r3, #132	; 0x84
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe6:	4413      	add	r3, r2
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	01db      	lsls	r3, r3, #7
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3384      	adds	r3, #132	; 0x84
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	4611      	mov	r1, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	01d2      	lsls	r2, r2, #7
 8005006:	440a      	add	r2, r1
 8005008:	3284      	adds	r2, #132	; 0x84
 800500a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800500e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501e:	4413      	add	r3, r2
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	01db      	lsls	r3, r3, #7
 800502c:	440b      	add	r3, r1
 800502e:	3384      	adds	r3, #132	; 0x84
 8005030:	4619      	mov	r1, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	01db      	lsls	r3, r3, #7
 8005042:	4413      	add	r3, r2
 8005044:	3384      	adds	r3, #132	; 0x84
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	4611      	mov	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	01d2      	lsls	r2, r2, #7
 8005052:	440a      	add	r2, r1
 8005054:	3284      	adds	r2, #132	; 0x84
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	01db      	lsls	r3, r3, #7
 8005066:	4413      	add	r3, r2
 8005068:	3384      	adds	r3, #132	; 0x84
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	061b      	lsls	r3, r3, #24
 800508c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	01db      	lsls	r3, r3, #7
 8005098:	4413      	add	r3, r2
 800509a:	3384      	adds	r3, #132	; 0x84
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	01db      	lsls	r3, r3, #7
 80050a8:	4413      	add	r3, r2
 80050aa:	3384      	adds	r3, #132	; 0x84
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050b8:	461a      	mov	r2, r3
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	431a      	orrs	r2, r3
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	01db      	lsls	r3, r3, #7
 80050cc:	440b      	add	r3, r1
 80050ce:	3384      	adds	r3, #132	; 0x84
 80050d0:	4619      	mov	r1, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	01db      	lsls	r3, r3, #7
 80050e2:	4413      	add	r3, r2
 80050e4:	3384      	adds	r3, #132	; 0x84
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	4611      	mov	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	01d2      	lsls	r2, r2, #7
 80050f2:	440a      	add	r2, r1
 80050f4:	3284      	adds	r2, #132	; 0x84
 80050f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	01db      	lsls	r3, r3, #7
 8005106:	4413      	add	r3, r2
 8005108:	3384      	adds	r3, #132	; 0x84
 800510a:	461a      	mov	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	01db      	lsls	r3, r3, #7
 800511c:	4413      	add	r3, r2
 800511e:	3384      	adds	r3, #132	; 0x84
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	440b      	add	r3, r1
 800512e:	3384      	adds	r3, #132	; 0x84
 8005130:	4619      	mov	r1, r3
 8005132:	4b58      	ldr	r3, [pc, #352]	; (8005294 <LTDC_SetConfig+0x32c>)
 8005134:	4013      	ands	r3, r2
 8005136:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	68f9      	ldr	r1, [r7, #12]
 8005142:	6809      	ldr	r1, [r1, #0]
 8005144:	4608      	mov	r0, r1
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	01c9      	lsls	r1, r1, #7
 800514a:	4401      	add	r1, r0
 800514c:	3184      	adds	r1, #132	; 0x84
 800514e:	4313      	orrs	r3, r2
 8005150:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	01db      	lsls	r3, r3, #7
 800515c:	4413      	add	r3, r2
 800515e:	3384      	adds	r3, #132	; 0x84
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	01db      	lsls	r3, r3, #7
 800516c:	4413      	add	r3, r2
 800516e:	3384      	adds	r3, #132	; 0x84
 8005170:	461a      	mov	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	01db      	lsls	r3, r3, #7
 8005180:	4413      	add	r3, r2
 8005182:	3384      	adds	r3, #132	; 0x84
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005194:	2304      	movs	r3, #4
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e01b      	b.n	80051d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d102      	bne.n	80051a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80051a2:	2303      	movs	r3, #3
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e014      	b.n	80051d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d00b      	beq.n	80051c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d007      	beq.n	80051c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d003      	beq.n	80051c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051c4:	2b07      	cmp	r3, #7
 80051c6:	d102      	bne.n	80051ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80051c8:	2302      	movs	r3, #2
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e001      	b.n	80051d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	4413      	add	r3, r2
 80051de:	3384      	adds	r3, #132	; 0x84
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	4611      	mov	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	01d2      	lsls	r2, r2, #7
 80051ec:	440a      	add	r2, r1
 80051ee:	3284      	adds	r2, #132	; 0x84
 80051f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80051f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	041a      	lsls	r2, r3, #16
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	1acb      	subs	r3, r1, r3
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	3303      	adds	r3, #3
 8005214:	68f9      	ldr	r1, [r7, #12]
 8005216:	6809      	ldr	r1, [r1, #0]
 8005218:	4608      	mov	r0, r1
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	01c9      	lsls	r1, r1, #7
 800521e:	4401      	add	r1, r0
 8005220:	3184      	adds	r1, #132	; 0x84
 8005222:	4313      	orrs	r3, r2
 8005224:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	01db      	lsls	r3, r3, #7
 8005230:	4413      	add	r3, r2
 8005232:	3384      	adds	r3, #132	; 0x84
 8005234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	01db      	lsls	r3, r3, #7
 8005240:	440b      	add	r3, r1
 8005242:	3384      	adds	r3, #132	; 0x84
 8005244:	4619      	mov	r1, r3
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <LTDC_SetConfig+0x330>)
 8005248:	4013      	ands	r3, r2
 800524a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	01db      	lsls	r3, r3, #7
 8005256:	4413      	add	r3, r2
 8005258:	3384      	adds	r3, #132	; 0x84
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	01db      	lsls	r3, r3, #7
 800526c:	4413      	add	r3, r2
 800526e:	3384      	adds	r3, #132	; 0x84
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	4611      	mov	r1, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	01d2      	lsls	r2, r2, #7
 800527c:	440a      	add	r2, r1
 800527e:	3284      	adds	r2, #132	; 0x84
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	6013      	str	r3, [r2, #0]
}
 8005286:	bf00      	nop
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	fffff8f8 	.word	0xfffff8f8
 8005298:	fffff800 	.word	0xfffff800

0800529c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052a6:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_PWREx_EnableOverDrive+0x98>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	4a22      	ldr	r2, [pc, #136]	; (8005334 <HAL_PWREx_EnableOverDrive+0x98>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6413      	str	r3, [r2, #64]	; 0x40
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_PWREx_EnableOverDrive+0x98>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ca:	f7fd fd1b 	bl	8002d04 <HAL_GetTick>
 80052ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052d0:	e009      	b.n	80052e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052d2:	f7fd fd17 	bl	8002d04 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e0:	d901      	bls.n	80052e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e022      	b.n	800532c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f2:	d1ee      	bne.n	80052d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052f4:	4b10      	ldr	r3, [pc, #64]	; (8005338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005300:	f7fd fd00 	bl	8002d04 <HAL_GetTick>
 8005304:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005306:	e009      	b.n	800531c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005308:	f7fd fcfc 	bl	8002d04 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005316:	d901      	bls.n	800531c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e007      	b.n	800532c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_PWREx_EnableOverDrive+0x9c>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005328:	d1ee      	bne.n	8005308 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	40007000 	.word	0x40007000

0800533c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005344:	2300      	movs	r3, #0
 8005346:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e291      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8087 	beq.w	800546e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005360:	4b96      	ldr	r3, [pc, #600]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b04      	cmp	r3, #4
 800536a:	d00c      	beq.n	8005386 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536c:	4b93      	ldr	r3, [pc, #588]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b08      	cmp	r3, #8
 8005376:	d112      	bne.n	800539e <HAL_RCC_OscConfig+0x62>
 8005378:	4b90      	ldr	r3, [pc, #576]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005384:	d10b      	bne.n	800539e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005386:	4b8d      	ldr	r3, [pc, #564]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d06c      	beq.n	800546c <HAL_RCC_OscConfig+0x130>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d168      	bne.n	800546c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e26b      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a6:	d106      	bne.n	80053b6 <HAL_RCC_OscConfig+0x7a>
 80053a8:	4b84      	ldr	r3, [pc, #528]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a83      	ldr	r2, [pc, #524]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e02e      	b.n	8005414 <HAL_RCC_OscConfig+0xd8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x9c>
 80053be:	4b7f      	ldr	r3, [pc, #508]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7e      	ldr	r2, [pc, #504]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	4b7c      	ldr	r3, [pc, #496]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a7b      	ldr	r2, [pc, #492]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e01d      	b.n	8005414 <HAL_RCC_OscConfig+0xd8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCC_OscConfig+0xc0>
 80053e2:	4b76      	ldr	r3, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a75      	ldr	r2, [pc, #468]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b73      	ldr	r3, [pc, #460]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a72      	ldr	r2, [pc, #456]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e00b      	b.n	8005414 <HAL_RCC_OscConfig+0xd8>
 80053fc:	4b6f      	ldr	r3, [pc, #444]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6e      	ldr	r2, [pc, #440]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	4b6c      	ldr	r3, [pc, #432]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6b      	ldr	r2, [pc, #428]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800540e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d013      	beq.n	8005444 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fd fc72 	bl	8002d04 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005424:	f7fd fc6e 	bl	8002d04 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	; 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e21f      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b61      	ldr	r3, [pc, #388]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0xe8>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd fc5e 	bl	8002d04 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800544c:	f7fd fc5a 	bl	8002d04 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e20b      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545e:	4b57      	ldr	r3, [pc, #348]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x110>
 800546a:	e000      	b.n	800546e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d069      	beq.n	800554e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800547a:	4b50      	ldr	r3, [pc, #320]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005486:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b08      	cmp	r3, #8
 8005490:	d11c      	bne.n	80054cc <HAL_RCC_OscConfig+0x190>
 8005492:	4b4a      	ldr	r3, [pc, #296]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d116      	bne.n	80054cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_RCC_OscConfig+0x17a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e1df      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	4b41      	ldr	r3, [pc, #260]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	493d      	ldr	r1, [pc, #244]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ca:	e040      	b.n	800554e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d023      	beq.n	800551c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d4:	4b39      	ldr	r3, [pc, #228]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a38      	ldr	r2, [pc, #224]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fd fc10 	bl	8002d04 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e8:	f7fd fc0c 	bl	8002d04 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e1bd      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fa:	4b30      	ldr	r3, [pc, #192]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4929      	ldr	r1, [pc, #164]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]
 800551a:	e018      	b.n	800554e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551c:	4b27      	ldr	r3, [pc, #156]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a26      	ldr	r2, [pc, #152]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fd fbec 	bl	8002d04 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005530:	f7fd fbe8 	bl	8002d04 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e199      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d038      	beq.n	80055cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d019      	beq.n	8005596 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005566:	4a15      	ldr	r2, [pc, #84]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556e:	f7fd fbc9 	bl	8002d04 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005576:	f7fd fbc5 	bl	8002d04 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e176      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800558a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x23a>
 8005594:	e01a      	b.n	80055cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 8005598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559a:	4a08      	ldr	r2, [pc, #32]	; (80055bc <HAL_RCC_OscConfig+0x280>)
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fd fbaf 	bl	8002d04 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fd fbab 	bl	8002d04 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d903      	bls.n	80055c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e15c      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
 80055bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c0:	4b91      	ldr	r3, [pc, #580]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80055c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ee      	bne.n	80055aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80a4 	beq.w	8005722 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055da:	4b8b      	ldr	r3, [pc, #556]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10d      	bne.n	8005602 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	4a87      	ldr	r2, [pc, #540]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80055ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f0:	6413      	str	r3, [r2, #64]	; 0x40
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005602:	4b82      	ldr	r3, [pc, #520]	; (800580c <HAL_RCC_OscConfig+0x4d0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d118      	bne.n	8005640 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800560e:	4b7f      	ldr	r3, [pc, #508]	; (800580c <HAL_RCC_OscConfig+0x4d0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7e      	ldr	r2, [pc, #504]	; (800580c <HAL_RCC_OscConfig+0x4d0>)
 8005614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561a:	f7fd fb73 	bl	8002d04 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005622:	f7fd fb6f 	bl	8002d04 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b64      	cmp	r3, #100	; 0x64
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e120      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005634:	4b75      	ldr	r3, [pc, #468]	; (800580c <HAL_RCC_OscConfig+0x4d0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x31a>
 8005648:	4b6f      	ldr	r3, [pc, #444]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	4a6e      	ldr	r2, [pc, #440]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	6713      	str	r3, [r2, #112]	; 0x70
 8005654:	e02d      	b.n	80056b2 <HAL_RCC_OscConfig+0x376>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10c      	bne.n	8005678 <HAL_RCC_OscConfig+0x33c>
 800565e:	4b6a      	ldr	r3, [pc, #424]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	4a69      	ldr	r2, [pc, #420]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6713      	str	r3, [r2, #112]	; 0x70
 800566a:	4b67      	ldr	r3, [pc, #412]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	4a66      	ldr	r2, [pc, #408]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	6713      	str	r3, [r2, #112]	; 0x70
 8005676:	e01c      	b.n	80056b2 <HAL_RCC_OscConfig+0x376>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b05      	cmp	r3, #5
 800567e:	d10c      	bne.n	800569a <HAL_RCC_OscConfig+0x35e>
 8005680:	4b61      	ldr	r3, [pc, #388]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a60      	ldr	r2, [pc, #384]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005686:	f043 0304 	orr.w	r3, r3, #4
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
 800568c:	4b5e      	ldr	r3, [pc, #376]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a5d      	ldr	r2, [pc, #372]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	e00b      	b.n	80056b2 <HAL_RCC_OscConfig+0x376>
 800569a:	4b5b      	ldr	r3, [pc, #364]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4a5a      	ldr	r2, [pc, #360]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70
 80056a6:	4b58      	ldr	r3, [pc, #352]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4a57      	ldr	r2, [pc, #348]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80056ac:	f023 0304 	bic.w	r3, r3, #4
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d015      	beq.n	80056e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7fd fb23 	bl	8002d04 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c2:	f7fd fb1f 	bl	8002d04 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0ce      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d8:	4b4b      	ldr	r3, [pc, #300]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ee      	beq.n	80056c2 <HAL_RCC_OscConfig+0x386>
 80056e4:	e014      	b.n	8005710 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e6:	f7fd fb0d 	bl	8002d04 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fd fb09 	bl	8002d04 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0b8      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005704:	4b40      	ldr	r3, [pc, #256]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ee      	bne.n	80056ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d105      	bne.n	8005722 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005716:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800571c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80a4 	beq.w	8005874 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	2b08      	cmp	r3, #8
 8005736:	d06b      	beq.n	8005810 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d149      	bne.n	80057d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005740:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a30      	ldr	r2, [pc, #192]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fd fada 	bl	8002d04 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005754:	f7fd fad6 	bl	8002d04 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e087      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	019b      	lsls	r3, r3, #6
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	3b01      	subs	r3, #1
 800578c:	041b      	lsls	r3, r3, #16
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	4313      	orrs	r3, r2
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800579a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800579e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a0:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a18      	ldr	r2, [pc, #96]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fd faaa 	bl	8002d04 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fd faa6 	bl	8002d04 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e057      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0x478>
 80057d2:	e04f      	b.n	8005874 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fd fa90 	bl	8002d04 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fd fa8c 	bl	8002d04 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e03d      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	4b03      	ldr	r3, [pc, #12]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x4ac>
 8005806:	e035      	b.n	8005874 <HAL_RCC_OscConfig+0x538>
 8005808:	40023800 	.word	0x40023800
 800580c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x544>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d028      	beq.n	8005870 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d121      	bne.n	8005870 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d11a      	bne.n	8005870 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005846:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	3b01      	subs	r3, #1
 800585a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d107      	bne.n	8005870 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800

08005884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0d0      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b6a      	ldr	r3, [pc, #424]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d910      	bls.n	80058cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b67      	ldr	r3, [pc, #412]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 020f 	bic.w	r2, r3, #15
 80058b2:	4965      	ldr	r1, [pc, #404]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b63      	ldr	r3, [pc, #396]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0b8      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d020      	beq.n	800591a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e4:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4a58      	ldr	r2, [pc, #352]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 80058ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058fc:	4b53      	ldr	r3, [pc, #332]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a52      	ldr	r2, [pc, #328]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005906:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005908:	4b50      	ldr	r3, [pc, #320]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	494d      	ldr	r1, [pc, #308]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d040      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592e:	4b47      	ldr	r3, [pc, #284]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d115      	bne.n	8005966 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e07f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	4b41      	ldr	r3, [pc, #260]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e073      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005956:	4b3d      	ldr	r3, [pc, #244]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e06b      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005966:	4b39      	ldr	r3, [pc, #228]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 0203 	bic.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4936      	ldr	r1, [pc, #216]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fd f9c4 	bl	8002d04 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fd f9c0 	bl	8002d04 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e053      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 020c 	and.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d1eb      	bne.n	8005980 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d210      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 020f 	bic.w	r2, r3, #15
 80059be:	4922      	ldr	r1, [pc, #136]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b20      	ldr	r3, [pc, #128]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e032      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4916      	ldr	r1, [pc, #88]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a02:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	490e      	ldr	r1, [pc, #56]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a16:	f000 f821 	bl	8005a5c <HAL_RCC_GetSysClockFreq>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	490a      	ldr	r1, [pc, #40]	; (8005a50 <HAL_RCC_ClockConfig+0x1cc>)
 8005a28:	5ccb      	ldrb	r3, [r1, r3]
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <HAL_RCC_ClockConfig+0x1d0>)
 8005a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_RCC_ClockConfig+0x1d4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fd f920 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40023c00 	.word	0x40023c00
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	080076b4 	.word	0x080076b4
 8005a54:	20000028 	.word	0x20000028
 8005a58:	20000044 	.word	0x20000044

08005a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a5c:	b5b0      	push	{r4, r5, r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a62:	2100      	movs	r1, #0
 8005a64:	6079      	str	r1, [r7, #4]
 8005a66:	2100      	movs	r1, #0
 8005a68:	60f9      	str	r1, [r7, #12]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005a6e:	2100      	movs	r1, #0
 8005a70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a72:	4952      	ldr	r1, [pc, #328]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8005a74:	6889      	ldr	r1, [r1, #8]
 8005a76:	f001 010c 	and.w	r1, r1, #12
 8005a7a:	2908      	cmp	r1, #8
 8005a7c:	d00d      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x3e>
 8005a7e:	2908      	cmp	r1, #8
 8005a80:	f200 8094 	bhi.w	8005bac <HAL_RCC_GetSysClockFreq+0x150>
 8005a84:	2900      	cmp	r1, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x32>
 8005a88:	2904      	cmp	r1, #4
 8005a8a:	d003      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x38>
 8005a8c:	e08e      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a8e:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a90:	60bb      	str	r3, [r7, #8]
      break;
 8005a92:	e08e      	b.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a94:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a96:	60bb      	str	r3, [r7, #8]
      break;
 8005a98:	e08b      	b.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a9a:	4948      	ldr	r1, [pc, #288]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8005a9c:	6849      	ldr	r1, [r1, #4]
 8005a9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005aa2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005aa4:	4945      	ldr	r1, [pc, #276]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8005aa6:	6849      	ldr	r1, [r1, #4]
 8005aa8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d024      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab0:	4942      	ldr	r1, [pc, #264]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ab2:	6849      	ldr	r1, [r1, #4]
 8005ab4:	0989      	lsrs	r1, r1, #6
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ac0:	f04f 0500 	mov.w	r5, #0
 8005ac4:	ea00 0204 	and.w	r2, r0, r4
 8005ac8:	ea01 0305 	and.w	r3, r1, r5
 8005acc:	493d      	ldr	r1, [pc, #244]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ace:	fb01 f003 	mul.w	r0, r1, r3
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	fb01 f102 	mul.w	r1, r1, r2
 8005ad8:	1844      	adds	r4, r0, r1
 8005ada:	493a      	ldr	r1, [pc, #232]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005adc:	fba2 0101 	umull	r0, r1, r2, r1
 8005ae0:	1863      	adds	r3, r4, r1
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	f7fa fbe8 	bl	80002c0 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e04a      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	461a      	mov	r2, r3
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	ea02 0400 	and.w	r4, r2, r0
 8005b12:	ea03 0501 	and.w	r5, r3, r1
 8005b16:	4620      	mov	r0, r4
 8005b18:	4629      	mov	r1, r5
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	014b      	lsls	r3, r1, #5
 8005b24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b28:	0142      	lsls	r2, r0, #5
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	1b00      	subs	r0, r0, r4
 8005b30:	eb61 0105 	sbc.w	r1, r1, r5
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	018b      	lsls	r3, r1, #6
 8005b3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b42:	0182      	lsls	r2, r0, #6
 8005b44:	1a12      	subs	r2, r2, r0
 8005b46:	eb63 0301 	sbc.w	r3, r3, r1
 8005b4a:	f04f 0000 	mov.w	r0, #0
 8005b4e:	f04f 0100 	mov.w	r1, #0
 8005b52:	00d9      	lsls	r1, r3, #3
 8005b54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b58:	00d0      	lsls	r0, r2, #3
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	1912      	adds	r2, r2, r4
 8005b60:	eb45 0303 	adc.w	r3, r5, r3
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	0299      	lsls	r1, r3, #10
 8005b6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b72:	0290      	lsls	r0, r2, #10
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	f7fa fb9c 	bl	80002c0 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	60bb      	str	r3, [r7, #8]
      break;
 8005baa:	e002      	b.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005bae:	60bb      	str	r3, [r7, #8]
      break;
 8005bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bdb0      	pop	{r4, r5, r7, pc}
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	00f42400 	.word	0x00f42400
 8005bc4:	017d7840 	.word	0x017d7840

08005bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d012      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bf0:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	4a68      	ldr	r2, [pc, #416]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005bfa:	6093      	str	r3, [r2, #8]
 8005bfc:	4b66      	ldr	r3, [pc, #408]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	4964      	ldr	r1, [pc, #400]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c12:	2301      	movs	r3, #1
 8005c14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d017      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c22:	4b5d      	ldr	r3, [pc, #372]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	4959      	ldr	r1, [pc, #356]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c40:	d101      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005c42:	2301      	movs	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c5e:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	494a      	ldr	r1, [pc, #296]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 808b 	beq.w	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cac:	4b3a      	ldr	r3, [pc, #232]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	4a39      	ldr	r2, [pc, #228]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb8:	4b37      	ldr	r3, [pc, #220]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cc4:	4b35      	ldr	r3, [pc, #212]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fd f818 	bl	8002d04 <HAL_GetTick>
 8005cd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd8:	f7fd f814 	bl	8002d04 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e357      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cea:	4b2c      	ldr	r3, [pc, #176]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cf6:	4b28      	ldr	r3, [pc, #160]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d035      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d02e      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d1e:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d3c:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d114      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fc ffdc 	bl	8002d04 <HAL_GetTick>
 8005d4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7fc ffd8 	bl	8002d04 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e319      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0ee      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7e:	d111      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d8c:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d8e:	400b      	ands	r3, r1
 8005d90:	4901      	ldr	r1, [pc, #4]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40007000 	.word	0x40007000
 8005da0:	0ffffcff 	.word	0x0ffffcff
 8005da4:	4bb1      	ldr	r3, [pc, #708]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4ab0      	ldr	r2, [pc, #704]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005daa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dae:	6093      	str	r3, [r2, #8]
 8005db0:	4bae      	ldr	r3, [pc, #696]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbc:	49ab      	ldr	r1, [pc, #684]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dce:	4ba7      	ldr	r3, [pc, #668]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dd4:	4aa5      	ldr	r2, [pc, #660]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005dde:	4ba3      	ldr	r3, [pc, #652]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005de0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	49a0      	ldr	r1, [pc, #640]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dfc:	4b9b      	ldr	r3, [pc, #620]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e0a:	4998      	ldr	r1, [pc, #608]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e1e:	4b93      	ldr	r3, [pc, #588]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e2c:	498f      	ldr	r1, [pc, #572]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e40:	4b8a      	ldr	r3, [pc, #552]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4e:	4987      	ldr	r1, [pc, #540]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e62:	4b82      	ldr	r3, [pc, #520]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e70:	497e      	ldr	r1, [pc, #504]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e84:	4b79      	ldr	r3, [pc, #484]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	f023 0203 	bic.w	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e92:	4976      	ldr	r1, [pc, #472]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ea6:	4b71      	ldr	r3, [pc, #452]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eac:	f023 020c 	bic.w	r2, r3, #12
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	496d      	ldr	r1, [pc, #436]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed6:	4965      	ldr	r1, [pc, #404]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005eea:	4b60      	ldr	r3, [pc, #384]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	495c      	ldr	r1, [pc, #368]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f0c:	4b57      	ldr	r3, [pc, #348]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	4954      	ldr	r1, [pc, #336]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f2e:	4b4f      	ldr	r3, [pc, #316]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	494b      	ldr	r1, [pc, #300]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005f50:	4b46      	ldr	r3, [pc, #280]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5e:	4943      	ldr	r1, [pc, #268]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005f72:	4b3e      	ldr	r3, [pc, #248]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f80:	493a      	ldr	r1, [pc, #232]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f94:	4b35      	ldr	r3, [pc, #212]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	4932      	ldr	r1, [pc, #200]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d011      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005fb6:	4b2d      	ldr	r3, [pc, #180]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc4:	4929      	ldr	r1, [pc, #164]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fd4:	d101      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006004:	4919      	ldr	r1, [pc, #100]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006018:	4b14      	ldr	r3, [pc, #80]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006028:	4910      	ldr	r1, [pc, #64]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d006      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80d9 	beq.w	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a08      	ldr	r2, [pc, #32]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800604a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800604e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006050:	f7fc fe58 	bl	8002d04 <HAL_GetTick>
 8006054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006056:	e00b      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006058:	f7fc fe54 	bl	8002d04 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d904      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e197      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800606a:	bf00      	nop
 800606c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006070:	4b6c      	ldr	r3, [pc, #432]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ed      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d021      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11d      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800609e:	4b61      	ldr	r3, [pc, #388]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a4:	0e1b      	lsrs	r3, r3, #24
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	019a      	lsls	r2, r3, #6
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	061b      	lsls	r3, r3, #24
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	071b      	lsls	r3, r3, #28
 80060c4:	4957      	ldr	r1, [pc, #348]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d02e      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f6:	d129      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80060f8:	4b4a      	ldr	r3, [pc, #296]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006106:	4b47      	ldr	r3, [pc, #284]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800610c:	0f1b      	lsrs	r3, r3, #28
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	019a      	lsls	r2, r3, #6
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	431a      	orrs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	071b      	lsls	r3, r3, #28
 800612c:	493d      	ldr	r1, [pc, #244]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613a:	f023 021f 	bic.w	r2, r3, #31
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	3b01      	subs	r3, #1
 8006144:	4937      	ldr	r1, [pc, #220]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006158:	4b32      	ldr	r3, [pc, #200]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615e:	0e1b      	lsrs	r3, r3, #24
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006166:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616c:	0f1b      	lsrs	r3, r3, #28
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	019a      	lsls	r2, r3, #6
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	041b      	lsls	r3, r3, #16
 8006180:	431a      	orrs	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	061b      	lsls	r3, r3, #24
 8006186:	431a      	orrs	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	071b      	lsls	r3, r3, #28
 800618c:	4925      	ldr	r1, [pc, #148]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d011      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	019a      	lsls	r2, r3, #6
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	041b      	lsls	r3, r3, #16
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	071b      	lsls	r3, r3, #28
 80061bc:	4919      	ldr	r1, [pc, #100]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a16      	ldr	r2, [pc, #88]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d0:	f7fc fd98 	bl	8002d04 <HAL_GetTick>
 80061d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061d8:	f7fc fd94 	bl	8002d04 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b64      	cmp	r3, #100	; 0x64
 80061e4:	d901      	bls.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e0d7      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 80cd 	bne.w	8006398 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a08      	ldr	r2, [pc, #32]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800620a:	f7fc fd7b 	bl	8002d04 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006210:	e00a      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006212:	f7fc fd77 	bl	8002d04 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b64      	cmp	r3, #100	; 0x64
 800621e:	d903      	bls.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e0ba      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006224:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006228:	4b5e      	ldr	r3, [pc, #376]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006234:	d0ed      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006252:	2b00      	cmp	r3, #0
 8006254:	d02e      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d12a      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800625e:	4b51      	ldr	r3, [pc, #324]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	0c1b      	lsrs	r3, r3, #16
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800626c:	4b4d      	ldr	r3, [pc, #308]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006272:	0f1b      	lsrs	r3, r3, #28
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	019a      	lsls	r2, r3, #6
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	071b      	lsls	r3, r3, #28
 8006292:	4944      	ldr	r1, [pc, #272]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800629a:	4b42      	ldr	r3, [pc, #264]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800629c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	3b01      	subs	r3, #1
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	493d      	ldr	r1, [pc, #244]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d022      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c8:	d11d      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062ca:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	0e1b      	lsrs	r3, r3, #24
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062d8:	4b32      	ldr	r3, [pc, #200]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062de:	0f1b      	lsrs	r3, r3, #28
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	019a      	lsls	r2, r3, #6
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	431a      	orrs	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	061b      	lsls	r3, r3, #24
 80062f8:	431a      	orrs	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	071b      	lsls	r3, r3, #28
 80062fe:	4929      	ldr	r1, [pc, #164]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d028      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006312:	4b24      	ldr	r3, [pc, #144]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	0e1b      	lsrs	r3, r3, #24
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006320:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	0c1b      	lsrs	r3, r3, #16
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	019a      	lsls	r2, r3, #6
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	431a      	orrs	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	061b      	lsls	r3, r3, #24
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	071b      	lsls	r3, r3, #28
 8006346:	4917      	ldr	r1, [pc, #92]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800634e:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4911      	ldr	r1, [pc, #68]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a0e      	ldr	r2, [pc, #56]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800636a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006370:	f7fc fcc8 	bl	8002d04 <HAL_GetTick>
 8006374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006378:	f7fc fcc4 	bl	8002d04 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e007      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006396:	d1ef      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800

080063a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e025      	b.n	8006408 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fc fb79 	bl	8002ac8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f000 fbd1 	bl	8006b90 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	f000 fc25 	bl	8006c48 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006422:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d101      	bne.n	800642e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800642a:	2302      	movs	r3, #2
 800642c:	e021      	b.n	8006472 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d002      	beq.n	800643a <HAL_SDRAM_SendCommand+0x2a>
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	2b05      	cmp	r3, #5
 8006438:	d118      	bne.n	800646c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fc66 	bl	8006d1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d104      	bne.n	8006462 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2205      	movs	r2, #5
 800645c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006460:	e006      	b.n	8006470 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800646a:	e001      	b.n	8006470 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d101      	bne.n	8006494 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
 8006492:	e016      	b.n	80064c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10f      	bne.n	80064c0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fc58 	bl	8006d64 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e049      	b.n	8006570 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fc fa17 	bl	8002924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 f9f5 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	d001      	beq.n	8006590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e054      	b.n	800663a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a26      	ldr	r2, [pc, #152]	; (8006648 <HAL_TIM_Base_Start_IT+0xd0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d01d      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_TIM_Base_Start_IT+0xd4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_TIM_Base_Start_IT+0xd8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIM_Base_Start_IT+0xe0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <HAL_TIM_Base_Start_IT+0xe4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_TIM_Base_Start_IT+0xe8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d115      	bne.n	8006624 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	4b19      	ldr	r3, [pc, #100]	; (8006664 <HAL_TIM_Base_Start_IT+0xec>)
 8006600:	4013      	ands	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b06      	cmp	r3, #6
 8006608:	d015      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0xbe>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d011      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	e008      	b.n	8006636 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e000      	b.n	8006638 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40010000 	.word	0x40010000
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40010400 	.word	0x40010400
 800665c:	40014000 	.word	0x40014000
 8006660:	40001800 	.word	0x40001800
 8006664:	00010007 	.word	0x00010007

08006668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d122      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b02      	cmp	r3, #2
 800668a:	d11b      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0202 	mvn.w	r2, #2
 8006694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f905 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 80066b0:	e005      	b.n	80066be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8f7 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f908 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d122      	bne.n	8006718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d11b      	bne.n	8006718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0204 	mvn.w	r2, #4
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8db 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8cd 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8de 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b08      	cmp	r3, #8
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b08      	cmp	r3, #8
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0208 	mvn.w	r2, #8
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2204      	movs	r2, #4
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8b1 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8a3 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8b4 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d122      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b10      	cmp	r3, #16
 8006786:	d11b      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0210 	mvn.w	r2, #16
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2208      	movs	r2, #8
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f887 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f879 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f88a 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10e      	bne.n	80067ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0201 	mvn.w	r2, #1
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fb f956 	bl	8001a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9a8 	bl	8006b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d10e      	bne.n	8006846 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d107      	bne.n	8006846 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800683e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f99b 	bl	8006b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d10e      	bne.n	8006872 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d107      	bne.n	8006872 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800686a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f838 	bl	80068e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b20      	cmp	r3, #32
 800687e:	d10e      	bne.n	800689e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d107      	bne.n	800689e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0220 	mvn.w	r2, #32
 8006896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f95b 	bl	8006b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a40      	ldr	r2, [pc, #256]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d00f      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3d      	ldr	r2, [pc, #244]	; (8006a10 <TIM_Base_SetConfig+0x118>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00b      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3c      	ldr	r2, [pc, #240]	; (8006a14 <TIM_Base_SetConfig+0x11c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d007      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3b      	ldr	r2, [pc, #236]	; (8006a18 <TIM_Base_SetConfig+0x120>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a3a      	ldr	r2, [pc, #232]	; (8006a1c <TIM_Base_SetConfig+0x124>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2f      	ldr	r2, [pc, #188]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d02b      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d027      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <TIM_Base_SetConfig+0x118>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d023      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2b      	ldr	r2, [pc, #172]	; (8006a14 <TIM_Base_SetConfig+0x11c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01f      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2a      	ldr	r2, [pc, #168]	; (8006a18 <TIM_Base_SetConfig+0x120>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01b      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a29      	ldr	r2, [pc, #164]	; (8006a1c <TIM_Base_SetConfig+0x124>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d017      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a28      	ldr	r2, [pc, #160]	; (8006a20 <TIM_Base_SetConfig+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a27      	ldr	r2, [pc, #156]	; (8006a24 <TIM_Base_SetConfig+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00f      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a26      	ldr	r2, [pc, #152]	; (8006a28 <TIM_Base_SetConfig+0x130>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00b      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a25      	ldr	r2, [pc, #148]	; (8006a2c <TIM_Base_SetConfig+0x134>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d007      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <TIM_Base_SetConfig+0x138>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <TIM_Base_SetConfig+0x13c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d108      	bne.n	80069bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0xf8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <TIM_Base_SetConfig+0x124>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d103      	bne.n	80069f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	615a      	str	r2, [r3, #20]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800
 8006a2c:	40001800 	.word	0x40001800
 8006a30:	40001c00 	.word	0x40001c00
 8006a34:	40002000 	.word	0x40002000

08006a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e06d      	b.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a30      	ldr	r2, [pc, #192]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d108      	bne.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a20      	ldr	r2, [pc, #128]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac2:	d01d      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1d      	ldr	r2, [pc, #116]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a16      	ldr	r2, [pc, #88]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10c      	bne.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40010400 	.word	0x40010400
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000c00 	.word	0x40000c00
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40001800 	.word	0x40001800

08006b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d121      	bne.n	8006be6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <FMC_SDRAM_Init+0xb4>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	6851      	ldr	r1, [r2, #4]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	4311      	orrs	r1, r2
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	68d2      	ldr	r2, [r2, #12]
 8006bb8:	4311      	orrs	r1, r2
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	6912      	ldr	r2, [r2, #16]
 8006bbe:	4311      	orrs	r1, r2
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	6952      	ldr	r2, [r2, #20]
 8006bc4:	4311      	orrs	r1, r2
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	6992      	ldr	r2, [r2, #24]
 8006bca:	4311      	orrs	r1, r2
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	69d2      	ldr	r2, [r2, #28]
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6a12      	ldr	r2, [r2, #32]
 8006bd6:	4311      	orrs	r1, r2
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	e026      	b.n	8006c34 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69d9      	ldr	r1, [r3, #28]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4319      	orrs	r1, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <FMC_SDRAM_Init+0xb4>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	6851      	ldr	r1, [r2, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	6892      	ldr	r2, [r2, #8]
 8006c14:	4311      	orrs	r1, r2
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	68d2      	ldr	r2, [r2, #12]
 8006c1a:	4311      	orrs	r1, r2
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	6912      	ldr	r2, [r2, #16]
 8006c20:	4311      	orrs	r1, r2
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	6952      	ldr	r2, [r2, #20]
 8006c26:	4311      	orrs	r1, r2
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	6992      	ldr	r2, [r2, #24]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	ffff8000 	.word	0xffff8000

08006c48 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d128      	bne.n	8006cac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	1e59      	subs	r1, r3, #1
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	4319      	orrs	r1, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	4319      	orrs	r1, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	031b      	lsls	r3, r3, #12
 8006c84:	4319      	orrs	r1, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	041b      	lsls	r3, r3, #16
 8006c8e:	4319      	orrs	r1, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	051b      	lsls	r3, r3, #20
 8006c98:	4319      	orrs	r1, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	609a      	str	r2, [r3, #8]
 8006caa:	e02d      	b.n	8006d08 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <FMC_SDRAM_Timing_Init+0xd0>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	68d2      	ldr	r2, [r2, #12]
 8006cb8:	3a01      	subs	r2, #1
 8006cba:	0311      	lsls	r1, r2, #12
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	6952      	ldr	r2, [r2, #20]
 8006cc0:	3a01      	subs	r2, #1
 8006cc2:	0512      	lsls	r2, r2, #20
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	1e59      	subs	r1, r3, #1
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	4319      	orrs	r1, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	4319      	orrs	r1, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	4319      	orrs	r1, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	061b      	lsls	r3, r3, #24
 8006d00:	430b      	orrs	r3, r1
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	ff0f0fff 	.word	0xff0f0fff

08006d1c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <FMC_SDRAM_SendCommand+0x44>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	6811      	ldr	r1, [r2, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	6852      	ldr	r2, [r2, #4]
 8006d38:	4311      	orrs	r1, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	0152      	lsls	r2, r2, #5
 8006d42:	4311      	orrs	r1, r2
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	68d2      	ldr	r2, [r2, #12]
 8006d48:	0252      	lsls	r2, r2, #9
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	ffc00000 	.word	0xffc00000

08006d64 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	0052      	lsls	r2, r2, #1
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	ffffc001 	.word	0xffffc001

08006d94 <__errno>:
 8006d94:	4b01      	ldr	r3, [pc, #4]	; (8006d9c <__errno+0x8>)
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	2000004c 	.word	0x2000004c

08006da0 <__libc_init_array>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	4d0d      	ldr	r5, [pc, #52]	; (8006dd8 <__libc_init_array+0x38>)
 8006da4:	4c0d      	ldr	r4, [pc, #52]	; (8006ddc <__libc_init_array+0x3c>)
 8006da6:	1b64      	subs	r4, r4, r5
 8006da8:	10a4      	asrs	r4, r4, #2
 8006daa:	2600      	movs	r6, #0
 8006dac:	42a6      	cmp	r6, r4
 8006dae:	d109      	bne.n	8006dc4 <__libc_init_array+0x24>
 8006db0:	4d0b      	ldr	r5, [pc, #44]	; (8006de0 <__libc_init_array+0x40>)
 8006db2:	4c0c      	ldr	r4, [pc, #48]	; (8006de4 <__libc_init_array+0x44>)
 8006db4:	f000 fc4e 	bl	8007654 <_init>
 8006db8:	1b64      	subs	r4, r4, r5
 8006dba:	10a4      	asrs	r4, r4, #2
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	42a6      	cmp	r6, r4
 8006dc0:	d105      	bne.n	8006dce <__libc_init_array+0x2e>
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc8:	4798      	blx	r3
 8006dca:	3601      	adds	r6, #1
 8006dcc:	e7ee      	b.n	8006dac <__libc_init_array+0xc>
 8006dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd2:	4798      	blx	r3
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	e7f2      	b.n	8006dbe <__libc_init_array+0x1e>
 8006dd8:	08056b54 	.word	0x08056b54
 8006ddc:	08056b54 	.word	0x08056b54
 8006de0:	08056b54 	.word	0x08056b54
 8006de4:	08056b58 	.word	0x08056b58

08006de8 <memset>:
 8006de8:	4402      	add	r2, r0
 8006dea:	4603      	mov	r3, r0
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d100      	bne.n	8006df2 <memset+0xa>
 8006df0:	4770      	bx	lr
 8006df2:	f803 1b01 	strb.w	r1, [r3], #1
 8006df6:	e7f9      	b.n	8006dec <memset+0x4>

08006df8 <siprintf>:
 8006df8:	b40e      	push	{r1, r2, r3}
 8006dfa:	b500      	push	{lr}
 8006dfc:	b09c      	sub	sp, #112	; 0x70
 8006dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8006e00:	9002      	str	r0, [sp, #8]
 8006e02:	9006      	str	r0, [sp, #24]
 8006e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e08:	4809      	ldr	r0, [pc, #36]	; (8006e30 <siprintf+0x38>)
 8006e0a:	9107      	str	r1, [sp, #28]
 8006e0c:	9104      	str	r1, [sp, #16]
 8006e0e:	4909      	ldr	r1, [pc, #36]	; (8006e34 <siprintf+0x3c>)
 8006e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e14:	9105      	str	r1, [sp, #20]
 8006e16:	6800      	ldr	r0, [r0, #0]
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	a902      	add	r1, sp, #8
 8006e1c:	f000 f868 	bl	8006ef0 <_svfiprintf_r>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	b01c      	add	sp, #112	; 0x70
 8006e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e2c:	b003      	add	sp, #12
 8006e2e:	4770      	bx	lr
 8006e30:	2000004c 	.word	0x2000004c
 8006e34:	ffff0208 	.word	0xffff0208

08006e38 <__ssputs_r>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	688e      	ldr	r6, [r1, #8]
 8006e3e:	429e      	cmp	r6, r3
 8006e40:	4682      	mov	sl, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	4690      	mov	r8, r2
 8006e46:	461f      	mov	r7, r3
 8006e48:	d838      	bhi.n	8006ebc <__ssputs_r+0x84>
 8006e4a:	898a      	ldrh	r2, [r1, #12]
 8006e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e50:	d032      	beq.n	8006eb8 <__ssputs_r+0x80>
 8006e52:	6825      	ldr	r5, [r4, #0]
 8006e54:	6909      	ldr	r1, [r1, #16]
 8006e56:	eba5 0901 	sub.w	r9, r5, r1
 8006e5a:	6965      	ldr	r5, [r4, #20]
 8006e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e64:	3301      	adds	r3, #1
 8006e66:	444b      	add	r3, r9
 8006e68:	106d      	asrs	r5, r5, #1
 8006e6a:	429d      	cmp	r5, r3
 8006e6c:	bf38      	it	cc
 8006e6e:	461d      	movcc	r5, r3
 8006e70:	0553      	lsls	r3, r2, #21
 8006e72:	d531      	bpl.n	8006ed8 <__ssputs_r+0xa0>
 8006e74:	4629      	mov	r1, r5
 8006e76:	f000 fb47 	bl	8007508 <_malloc_r>
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	b950      	cbnz	r0, 8006e94 <__ssputs_r+0x5c>
 8006e7e:	230c      	movs	r3, #12
 8006e80:	f8ca 3000 	str.w	r3, [sl]
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e94:	6921      	ldr	r1, [r4, #16]
 8006e96:	464a      	mov	r2, r9
 8006e98:	f000 fabe 	bl	8007418 <memcpy>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	6126      	str	r6, [r4, #16]
 8006eaa:	6165      	str	r5, [r4, #20]
 8006eac:	444e      	add	r6, r9
 8006eae:	eba5 0509 	sub.w	r5, r5, r9
 8006eb2:	6026      	str	r6, [r4, #0]
 8006eb4:	60a5      	str	r5, [r4, #8]
 8006eb6:	463e      	mov	r6, r7
 8006eb8:	42be      	cmp	r6, r7
 8006eba:	d900      	bls.n	8006ebe <__ssputs_r+0x86>
 8006ebc:	463e      	mov	r6, r7
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	f000 fab6 	bl	8007434 <memmove>
 8006ec8:	68a3      	ldr	r3, [r4, #8]
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	1b9b      	subs	r3, r3, r6
 8006ece:	4432      	add	r2, r6
 8006ed0:	60a3      	str	r3, [r4, #8]
 8006ed2:	6022      	str	r2, [r4, #0]
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e7db      	b.n	8006e90 <__ssputs_r+0x58>
 8006ed8:	462a      	mov	r2, r5
 8006eda:	f000 fb6f 	bl	80075bc <_realloc_r>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1e1      	bne.n	8006ea8 <__ssputs_r+0x70>
 8006ee4:	6921      	ldr	r1, [r4, #16]
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	f000 fabe 	bl	8007468 <_free_r>
 8006eec:	e7c7      	b.n	8006e7e <__ssputs_r+0x46>
	...

08006ef0 <_svfiprintf_r>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4698      	mov	r8, r3
 8006ef6:	898b      	ldrh	r3, [r1, #12]
 8006ef8:	061b      	lsls	r3, r3, #24
 8006efa:	b09d      	sub	sp, #116	; 0x74
 8006efc:	4607      	mov	r7, r0
 8006efe:	460d      	mov	r5, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	d50e      	bpl.n	8006f22 <_svfiprintf_r+0x32>
 8006f04:	690b      	ldr	r3, [r1, #16]
 8006f06:	b963      	cbnz	r3, 8006f22 <_svfiprintf_r+0x32>
 8006f08:	2140      	movs	r1, #64	; 0x40
 8006f0a:	f000 fafd 	bl	8007508 <_malloc_r>
 8006f0e:	6028      	str	r0, [r5, #0]
 8006f10:	6128      	str	r0, [r5, #16]
 8006f12:	b920      	cbnz	r0, 8006f1e <_svfiprintf_r+0x2e>
 8006f14:	230c      	movs	r3, #12
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f1c:	e0d1      	b.n	80070c2 <_svfiprintf_r+0x1d2>
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	616b      	str	r3, [r5, #20]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9309      	str	r3, [sp, #36]	; 0x24
 8006f26:	2320      	movs	r3, #32
 8006f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f30:	2330      	movs	r3, #48	; 0x30
 8006f32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070dc <_svfiprintf_r+0x1ec>
 8006f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f3a:	f04f 0901 	mov.w	r9, #1
 8006f3e:	4623      	mov	r3, r4
 8006f40:	469a      	mov	sl, r3
 8006f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f46:	b10a      	cbz	r2, 8006f4c <_svfiprintf_r+0x5c>
 8006f48:	2a25      	cmp	r2, #37	; 0x25
 8006f4a:	d1f9      	bne.n	8006f40 <_svfiprintf_r+0x50>
 8006f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f50:	d00b      	beq.n	8006f6a <_svfiprintf_r+0x7a>
 8006f52:	465b      	mov	r3, fp
 8006f54:	4622      	mov	r2, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f7ff ff6d 	bl	8006e38 <__ssputs_r>
 8006f5e:	3001      	adds	r0, #1
 8006f60:	f000 80aa 	beq.w	80070b8 <_svfiprintf_r+0x1c8>
 8006f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f66:	445a      	add	r2, fp
 8006f68:	9209      	str	r2, [sp, #36]	; 0x24
 8006f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80a2 	beq.w	80070b8 <_svfiprintf_r+0x1c8>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f7e:	f10a 0a01 	add.w	sl, sl, #1
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	9307      	str	r3, [sp, #28]
 8006f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f8c:	4654      	mov	r4, sl
 8006f8e:	2205      	movs	r2, #5
 8006f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f94:	4851      	ldr	r0, [pc, #324]	; (80070dc <_svfiprintf_r+0x1ec>)
 8006f96:	f7f9 f943 	bl	8000220 <memchr>
 8006f9a:	9a04      	ldr	r2, [sp, #16]
 8006f9c:	b9d8      	cbnz	r0, 8006fd6 <_svfiprintf_r+0xe6>
 8006f9e:	06d0      	lsls	r0, r2, #27
 8006fa0:	bf44      	itt	mi
 8006fa2:	2320      	movmi	r3, #32
 8006fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa8:	0711      	lsls	r1, r2, #28
 8006faa:	bf44      	itt	mi
 8006fac:	232b      	movmi	r3, #43	; 0x2b
 8006fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb8:	d015      	beq.n	8006fe6 <_svfiprintf_r+0xf6>
 8006fba:	9a07      	ldr	r2, [sp, #28]
 8006fbc:	4654      	mov	r4, sl
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f04f 0c0a 	mov.w	ip, #10
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fca:	3b30      	subs	r3, #48	; 0x30
 8006fcc:	2b09      	cmp	r3, #9
 8006fce:	d94e      	bls.n	800706e <_svfiprintf_r+0x17e>
 8006fd0:	b1b0      	cbz	r0, 8007000 <_svfiprintf_r+0x110>
 8006fd2:	9207      	str	r2, [sp, #28]
 8006fd4:	e014      	b.n	8007000 <_svfiprintf_r+0x110>
 8006fd6:	eba0 0308 	sub.w	r3, r0, r8
 8006fda:	fa09 f303 	lsl.w	r3, r9, r3
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	46a2      	mov	sl, r4
 8006fe4:	e7d2      	b.n	8006f8c <_svfiprintf_r+0x9c>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	1d19      	adds	r1, r3, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	9103      	str	r1, [sp, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bfbb      	ittet	lt
 8006ff2:	425b      	neglt	r3, r3
 8006ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff8:	9307      	strge	r3, [sp, #28]
 8006ffa:	9307      	strlt	r3, [sp, #28]
 8006ffc:	bfb8      	it	lt
 8006ffe:	9204      	strlt	r2, [sp, #16]
 8007000:	7823      	ldrb	r3, [r4, #0]
 8007002:	2b2e      	cmp	r3, #46	; 0x2e
 8007004:	d10c      	bne.n	8007020 <_svfiprintf_r+0x130>
 8007006:	7863      	ldrb	r3, [r4, #1]
 8007008:	2b2a      	cmp	r3, #42	; 0x2a
 800700a:	d135      	bne.n	8007078 <_svfiprintf_r+0x188>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	1d1a      	adds	r2, r3, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	9203      	str	r2, [sp, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	bfb8      	it	lt
 8007018:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800701c:	3402      	adds	r4, #2
 800701e:	9305      	str	r3, [sp, #20]
 8007020:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070ec <_svfiprintf_r+0x1fc>
 8007024:	7821      	ldrb	r1, [r4, #0]
 8007026:	2203      	movs	r2, #3
 8007028:	4650      	mov	r0, sl
 800702a:	f7f9 f8f9 	bl	8000220 <memchr>
 800702e:	b140      	cbz	r0, 8007042 <_svfiprintf_r+0x152>
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	eba0 000a 	sub.w	r0, r0, sl
 8007036:	fa03 f000 	lsl.w	r0, r3, r0
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	4303      	orrs	r3, r0
 800703e:	3401      	adds	r4, #1
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007046:	4826      	ldr	r0, [pc, #152]	; (80070e0 <_svfiprintf_r+0x1f0>)
 8007048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704c:	2206      	movs	r2, #6
 800704e:	f7f9 f8e7 	bl	8000220 <memchr>
 8007052:	2800      	cmp	r0, #0
 8007054:	d038      	beq.n	80070c8 <_svfiprintf_r+0x1d8>
 8007056:	4b23      	ldr	r3, [pc, #140]	; (80070e4 <_svfiprintf_r+0x1f4>)
 8007058:	bb1b      	cbnz	r3, 80070a2 <_svfiprintf_r+0x1b2>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	3307      	adds	r3, #7
 800705e:	f023 0307 	bic.w	r3, r3, #7
 8007062:	3308      	adds	r3, #8
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007068:	4433      	add	r3, r6
 800706a:	9309      	str	r3, [sp, #36]	; 0x24
 800706c:	e767      	b.n	8006f3e <_svfiprintf_r+0x4e>
 800706e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007072:	460c      	mov	r4, r1
 8007074:	2001      	movs	r0, #1
 8007076:	e7a5      	b.n	8006fc4 <_svfiprintf_r+0xd4>
 8007078:	2300      	movs	r3, #0
 800707a:	3401      	adds	r4, #1
 800707c:	9305      	str	r3, [sp, #20]
 800707e:	4619      	mov	r1, r3
 8007080:	f04f 0c0a 	mov.w	ip, #10
 8007084:	4620      	mov	r0, r4
 8007086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800708a:	3a30      	subs	r2, #48	; 0x30
 800708c:	2a09      	cmp	r2, #9
 800708e:	d903      	bls.n	8007098 <_svfiprintf_r+0x1a8>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0c5      	beq.n	8007020 <_svfiprintf_r+0x130>
 8007094:	9105      	str	r1, [sp, #20]
 8007096:	e7c3      	b.n	8007020 <_svfiprintf_r+0x130>
 8007098:	fb0c 2101 	mla	r1, ip, r1, r2
 800709c:	4604      	mov	r4, r0
 800709e:	2301      	movs	r3, #1
 80070a0:	e7f0      	b.n	8007084 <_svfiprintf_r+0x194>
 80070a2:	ab03      	add	r3, sp, #12
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	462a      	mov	r2, r5
 80070a8:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <_svfiprintf_r+0x1f8>)
 80070aa:	a904      	add	r1, sp, #16
 80070ac:	4638      	mov	r0, r7
 80070ae:	f3af 8000 	nop.w
 80070b2:	1c42      	adds	r2, r0, #1
 80070b4:	4606      	mov	r6, r0
 80070b6:	d1d6      	bne.n	8007066 <_svfiprintf_r+0x176>
 80070b8:	89ab      	ldrh	r3, [r5, #12]
 80070ba:	065b      	lsls	r3, r3, #25
 80070bc:	f53f af2c 	bmi.w	8006f18 <_svfiprintf_r+0x28>
 80070c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c2:	b01d      	add	sp, #116	; 0x74
 80070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	462a      	mov	r2, r5
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <_svfiprintf_r+0x1f8>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4638      	mov	r0, r7
 80070d4:	f000 f87a 	bl	80071cc <_printf_i>
 80070d8:	e7eb      	b.n	80070b2 <_svfiprintf_r+0x1c2>
 80070da:	bf00      	nop
 80070dc:	08056b18 	.word	0x08056b18
 80070e0:	08056b22 	.word	0x08056b22
 80070e4:	00000000 	.word	0x00000000
 80070e8:	08006e39 	.word	0x08006e39
 80070ec:	08056b1e 	.word	0x08056b1e

080070f0 <_printf_common>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	4616      	mov	r6, r2
 80070f6:	4699      	mov	r9, r3
 80070f8:	688a      	ldr	r2, [r1, #8]
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007100:	4293      	cmp	r3, r2
 8007102:	bfb8      	it	lt
 8007104:	4613      	movlt	r3, r2
 8007106:	6033      	str	r3, [r6, #0]
 8007108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800710c:	4607      	mov	r7, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b10a      	cbz	r2, 8007116 <_printf_common+0x26>
 8007112:	3301      	adds	r3, #1
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	0699      	lsls	r1, r3, #26
 800711a:	bf42      	ittt	mi
 800711c:	6833      	ldrmi	r3, [r6, #0]
 800711e:	3302      	addmi	r3, #2
 8007120:	6033      	strmi	r3, [r6, #0]
 8007122:	6825      	ldr	r5, [r4, #0]
 8007124:	f015 0506 	ands.w	r5, r5, #6
 8007128:	d106      	bne.n	8007138 <_printf_common+0x48>
 800712a:	f104 0a19 	add.w	sl, r4, #25
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	6832      	ldr	r2, [r6, #0]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	42ab      	cmp	r3, r5
 8007136:	dc26      	bgt.n	8007186 <_printf_common+0x96>
 8007138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800713c:	1e13      	subs	r3, r2, #0
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	bf18      	it	ne
 8007142:	2301      	movne	r3, #1
 8007144:	0692      	lsls	r2, r2, #26
 8007146:	d42b      	bmi.n	80071a0 <_printf_common+0xb0>
 8007148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800714c:	4649      	mov	r1, r9
 800714e:	4638      	mov	r0, r7
 8007150:	47c0      	blx	r8
 8007152:	3001      	adds	r0, #1
 8007154:	d01e      	beq.n	8007194 <_printf_common+0xa4>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	68e5      	ldr	r5, [r4, #12]
 800715a:	6832      	ldr	r2, [r6, #0]
 800715c:	f003 0306 	and.w	r3, r3, #6
 8007160:	2b04      	cmp	r3, #4
 8007162:	bf08      	it	eq
 8007164:	1aad      	subeq	r5, r5, r2
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	6922      	ldr	r2, [r4, #16]
 800716a:	bf0c      	ite	eq
 800716c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007170:	2500      	movne	r5, #0
 8007172:	4293      	cmp	r3, r2
 8007174:	bfc4      	itt	gt
 8007176:	1a9b      	subgt	r3, r3, r2
 8007178:	18ed      	addgt	r5, r5, r3
 800717a:	2600      	movs	r6, #0
 800717c:	341a      	adds	r4, #26
 800717e:	42b5      	cmp	r5, r6
 8007180:	d11a      	bne.n	80071b8 <_printf_common+0xc8>
 8007182:	2000      	movs	r0, #0
 8007184:	e008      	b.n	8007198 <_printf_common+0xa8>
 8007186:	2301      	movs	r3, #1
 8007188:	4652      	mov	r2, sl
 800718a:	4649      	mov	r1, r9
 800718c:	4638      	mov	r0, r7
 800718e:	47c0      	blx	r8
 8007190:	3001      	adds	r0, #1
 8007192:	d103      	bne.n	800719c <_printf_common+0xac>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719c:	3501      	adds	r5, #1
 800719e:	e7c6      	b.n	800712e <_printf_common+0x3e>
 80071a0:	18e1      	adds	r1, r4, r3
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	2030      	movs	r0, #48	; 0x30
 80071a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071aa:	4422      	add	r2, r4
 80071ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071b4:	3302      	adds	r3, #2
 80071b6:	e7c7      	b.n	8007148 <_printf_common+0x58>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4622      	mov	r2, r4
 80071bc:	4649      	mov	r1, r9
 80071be:	4638      	mov	r0, r7
 80071c0:	47c0      	blx	r8
 80071c2:	3001      	adds	r0, #1
 80071c4:	d0e6      	beq.n	8007194 <_printf_common+0xa4>
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7d9      	b.n	800717e <_printf_common+0x8e>
	...

080071cc <_printf_i>:
 80071cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	460c      	mov	r4, r1
 80071d2:	4691      	mov	r9, r2
 80071d4:	7e27      	ldrb	r7, [r4, #24]
 80071d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071d8:	2f78      	cmp	r7, #120	; 0x78
 80071da:	4680      	mov	r8, r0
 80071dc:	469a      	mov	sl, r3
 80071de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e2:	d807      	bhi.n	80071f4 <_printf_i+0x28>
 80071e4:	2f62      	cmp	r7, #98	; 0x62
 80071e6:	d80a      	bhi.n	80071fe <_printf_i+0x32>
 80071e8:	2f00      	cmp	r7, #0
 80071ea:	f000 80d8 	beq.w	800739e <_printf_i+0x1d2>
 80071ee:	2f58      	cmp	r7, #88	; 0x58
 80071f0:	f000 80a3 	beq.w	800733a <_printf_i+0x16e>
 80071f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071fc:	e03a      	b.n	8007274 <_printf_i+0xa8>
 80071fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007202:	2b15      	cmp	r3, #21
 8007204:	d8f6      	bhi.n	80071f4 <_printf_i+0x28>
 8007206:	a001      	add	r0, pc, #4	; (adr r0, 800720c <_printf_i+0x40>)
 8007208:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800720c:	08007265 	.word	0x08007265
 8007210:	08007279 	.word	0x08007279
 8007214:	080071f5 	.word	0x080071f5
 8007218:	080071f5 	.word	0x080071f5
 800721c:	080071f5 	.word	0x080071f5
 8007220:	080071f5 	.word	0x080071f5
 8007224:	08007279 	.word	0x08007279
 8007228:	080071f5 	.word	0x080071f5
 800722c:	080071f5 	.word	0x080071f5
 8007230:	080071f5 	.word	0x080071f5
 8007234:	080071f5 	.word	0x080071f5
 8007238:	08007385 	.word	0x08007385
 800723c:	080072a9 	.word	0x080072a9
 8007240:	08007367 	.word	0x08007367
 8007244:	080071f5 	.word	0x080071f5
 8007248:	080071f5 	.word	0x080071f5
 800724c:	080073a7 	.word	0x080073a7
 8007250:	080071f5 	.word	0x080071f5
 8007254:	080072a9 	.word	0x080072a9
 8007258:	080071f5 	.word	0x080071f5
 800725c:	080071f5 	.word	0x080071f5
 8007260:	0800736f 	.word	0x0800736f
 8007264:	680b      	ldr	r3, [r1, #0]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	600a      	str	r2, [r1, #0]
 800726c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007274:	2301      	movs	r3, #1
 8007276:	e0a3      	b.n	80073c0 <_printf_i+0x1f4>
 8007278:	6825      	ldr	r5, [r4, #0]
 800727a:	6808      	ldr	r0, [r1, #0]
 800727c:	062e      	lsls	r6, r5, #24
 800727e:	f100 0304 	add.w	r3, r0, #4
 8007282:	d50a      	bpl.n	800729a <_printf_i+0xce>
 8007284:	6805      	ldr	r5, [r0, #0]
 8007286:	600b      	str	r3, [r1, #0]
 8007288:	2d00      	cmp	r5, #0
 800728a:	da03      	bge.n	8007294 <_printf_i+0xc8>
 800728c:	232d      	movs	r3, #45	; 0x2d
 800728e:	426d      	negs	r5, r5
 8007290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007294:	485e      	ldr	r0, [pc, #376]	; (8007410 <_printf_i+0x244>)
 8007296:	230a      	movs	r3, #10
 8007298:	e019      	b.n	80072ce <_printf_i+0x102>
 800729a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800729e:	6805      	ldr	r5, [r0, #0]
 80072a0:	600b      	str	r3, [r1, #0]
 80072a2:	bf18      	it	ne
 80072a4:	b22d      	sxthne	r5, r5
 80072a6:	e7ef      	b.n	8007288 <_printf_i+0xbc>
 80072a8:	680b      	ldr	r3, [r1, #0]
 80072aa:	6825      	ldr	r5, [r4, #0]
 80072ac:	1d18      	adds	r0, r3, #4
 80072ae:	6008      	str	r0, [r1, #0]
 80072b0:	0628      	lsls	r0, r5, #24
 80072b2:	d501      	bpl.n	80072b8 <_printf_i+0xec>
 80072b4:	681d      	ldr	r5, [r3, #0]
 80072b6:	e002      	b.n	80072be <_printf_i+0xf2>
 80072b8:	0669      	lsls	r1, r5, #25
 80072ba:	d5fb      	bpl.n	80072b4 <_printf_i+0xe8>
 80072bc:	881d      	ldrh	r5, [r3, #0]
 80072be:	4854      	ldr	r0, [pc, #336]	; (8007410 <_printf_i+0x244>)
 80072c0:	2f6f      	cmp	r7, #111	; 0x6f
 80072c2:	bf0c      	ite	eq
 80072c4:	2308      	moveq	r3, #8
 80072c6:	230a      	movne	r3, #10
 80072c8:	2100      	movs	r1, #0
 80072ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ce:	6866      	ldr	r6, [r4, #4]
 80072d0:	60a6      	str	r6, [r4, #8]
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	bfa2      	ittt	ge
 80072d6:	6821      	ldrge	r1, [r4, #0]
 80072d8:	f021 0104 	bicge.w	r1, r1, #4
 80072dc:	6021      	strge	r1, [r4, #0]
 80072de:	b90d      	cbnz	r5, 80072e4 <_printf_i+0x118>
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	d04d      	beq.n	8007380 <_printf_i+0x1b4>
 80072e4:	4616      	mov	r6, r2
 80072e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ea:	fb03 5711 	mls	r7, r3, r1, r5
 80072ee:	5dc7      	ldrb	r7, [r0, r7]
 80072f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072f4:	462f      	mov	r7, r5
 80072f6:	42bb      	cmp	r3, r7
 80072f8:	460d      	mov	r5, r1
 80072fa:	d9f4      	bls.n	80072e6 <_printf_i+0x11a>
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d10b      	bne.n	8007318 <_printf_i+0x14c>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	07df      	lsls	r7, r3, #31
 8007304:	d508      	bpl.n	8007318 <_printf_i+0x14c>
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	6861      	ldr	r1, [r4, #4]
 800730a:	4299      	cmp	r1, r3
 800730c:	bfde      	ittt	le
 800730e:	2330      	movle	r3, #48	; 0x30
 8007310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007314:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007318:	1b92      	subs	r2, r2, r6
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	f8cd a000 	str.w	sl, [sp]
 8007320:	464b      	mov	r3, r9
 8007322:	aa03      	add	r2, sp, #12
 8007324:	4621      	mov	r1, r4
 8007326:	4640      	mov	r0, r8
 8007328:	f7ff fee2 	bl	80070f0 <_printf_common>
 800732c:	3001      	adds	r0, #1
 800732e:	d14c      	bne.n	80073ca <_printf_i+0x1fe>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007334:	b004      	add	sp, #16
 8007336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733a:	4835      	ldr	r0, [pc, #212]	; (8007410 <_printf_i+0x244>)
 800733c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	680e      	ldr	r6, [r1, #0]
 8007344:	061f      	lsls	r7, r3, #24
 8007346:	f856 5b04 	ldr.w	r5, [r6], #4
 800734a:	600e      	str	r6, [r1, #0]
 800734c:	d514      	bpl.n	8007378 <_printf_i+0x1ac>
 800734e:	07d9      	lsls	r1, r3, #31
 8007350:	bf44      	itt	mi
 8007352:	f043 0320 	orrmi.w	r3, r3, #32
 8007356:	6023      	strmi	r3, [r4, #0]
 8007358:	b91d      	cbnz	r5, 8007362 <_printf_i+0x196>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f023 0320 	bic.w	r3, r3, #32
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	2310      	movs	r3, #16
 8007364:	e7b0      	b.n	80072c8 <_printf_i+0xfc>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f043 0320 	orr.w	r3, r3, #32
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	2378      	movs	r3, #120	; 0x78
 8007370:	4828      	ldr	r0, [pc, #160]	; (8007414 <_printf_i+0x248>)
 8007372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007376:	e7e3      	b.n	8007340 <_printf_i+0x174>
 8007378:	065e      	lsls	r6, r3, #25
 800737a:	bf48      	it	mi
 800737c:	b2ad      	uxthmi	r5, r5
 800737e:	e7e6      	b.n	800734e <_printf_i+0x182>
 8007380:	4616      	mov	r6, r2
 8007382:	e7bb      	b.n	80072fc <_printf_i+0x130>
 8007384:	680b      	ldr	r3, [r1, #0]
 8007386:	6826      	ldr	r6, [r4, #0]
 8007388:	6960      	ldr	r0, [r4, #20]
 800738a:	1d1d      	adds	r5, r3, #4
 800738c:	600d      	str	r5, [r1, #0]
 800738e:	0635      	lsls	r5, r6, #24
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	d501      	bpl.n	8007398 <_printf_i+0x1cc>
 8007394:	6018      	str	r0, [r3, #0]
 8007396:	e002      	b.n	800739e <_printf_i+0x1d2>
 8007398:	0671      	lsls	r1, r6, #25
 800739a:	d5fb      	bpl.n	8007394 <_printf_i+0x1c8>
 800739c:	8018      	strh	r0, [r3, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	4616      	mov	r6, r2
 80073a4:	e7ba      	b.n	800731c <_printf_i+0x150>
 80073a6:	680b      	ldr	r3, [r1, #0]
 80073a8:	1d1a      	adds	r2, r3, #4
 80073aa:	600a      	str	r2, [r1, #0]
 80073ac:	681e      	ldr	r6, [r3, #0]
 80073ae:	6862      	ldr	r2, [r4, #4]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7f8 ff34 	bl	8000220 <memchr>
 80073b8:	b108      	cbz	r0, 80073be <_printf_i+0x1f2>
 80073ba:	1b80      	subs	r0, r0, r6
 80073bc:	6060      	str	r0, [r4, #4]
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	6123      	str	r3, [r4, #16]
 80073c2:	2300      	movs	r3, #0
 80073c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c8:	e7a8      	b.n	800731c <_printf_i+0x150>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	4632      	mov	r2, r6
 80073ce:	4649      	mov	r1, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	47d0      	blx	sl
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0ab      	beq.n	8007330 <_printf_i+0x164>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	079b      	lsls	r3, r3, #30
 80073dc:	d413      	bmi.n	8007406 <_printf_i+0x23a>
 80073de:	68e0      	ldr	r0, [r4, #12]
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	4298      	cmp	r0, r3
 80073e4:	bfb8      	it	lt
 80073e6:	4618      	movlt	r0, r3
 80073e8:	e7a4      	b.n	8007334 <_printf_i+0x168>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4632      	mov	r2, r6
 80073ee:	4649      	mov	r1, r9
 80073f0:	4640      	mov	r0, r8
 80073f2:	47d0      	blx	sl
 80073f4:	3001      	adds	r0, #1
 80073f6:	d09b      	beq.n	8007330 <_printf_i+0x164>
 80073f8:	3501      	adds	r5, #1
 80073fa:	68e3      	ldr	r3, [r4, #12]
 80073fc:	9903      	ldr	r1, [sp, #12]
 80073fe:	1a5b      	subs	r3, r3, r1
 8007400:	42ab      	cmp	r3, r5
 8007402:	dcf2      	bgt.n	80073ea <_printf_i+0x21e>
 8007404:	e7eb      	b.n	80073de <_printf_i+0x212>
 8007406:	2500      	movs	r5, #0
 8007408:	f104 0619 	add.w	r6, r4, #25
 800740c:	e7f5      	b.n	80073fa <_printf_i+0x22e>
 800740e:	bf00      	nop
 8007410:	08056b29 	.word	0x08056b29
 8007414:	08056b3a 	.word	0x08056b3a

08007418 <memcpy>:
 8007418:	440a      	add	r2, r1
 800741a:	4291      	cmp	r1, r2
 800741c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007420:	d100      	bne.n	8007424 <memcpy+0xc>
 8007422:	4770      	bx	lr
 8007424:	b510      	push	{r4, lr}
 8007426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800742e:	4291      	cmp	r1, r2
 8007430:	d1f9      	bne.n	8007426 <memcpy+0xe>
 8007432:	bd10      	pop	{r4, pc}

08007434 <memmove>:
 8007434:	4288      	cmp	r0, r1
 8007436:	b510      	push	{r4, lr}
 8007438:	eb01 0402 	add.w	r4, r1, r2
 800743c:	d902      	bls.n	8007444 <memmove+0x10>
 800743e:	4284      	cmp	r4, r0
 8007440:	4623      	mov	r3, r4
 8007442:	d807      	bhi.n	8007454 <memmove+0x20>
 8007444:	1e43      	subs	r3, r0, #1
 8007446:	42a1      	cmp	r1, r4
 8007448:	d008      	beq.n	800745c <memmove+0x28>
 800744a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007452:	e7f8      	b.n	8007446 <memmove+0x12>
 8007454:	4402      	add	r2, r0
 8007456:	4601      	mov	r1, r0
 8007458:	428a      	cmp	r2, r1
 800745a:	d100      	bne.n	800745e <memmove+0x2a>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007466:	e7f7      	b.n	8007458 <memmove+0x24>

08007468 <_free_r>:
 8007468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800746a:	2900      	cmp	r1, #0
 800746c:	d048      	beq.n	8007500 <_free_r+0x98>
 800746e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007472:	9001      	str	r0, [sp, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f1a1 0404 	sub.w	r4, r1, #4
 800747a:	bfb8      	it	lt
 800747c:	18e4      	addlt	r4, r4, r3
 800747e:	f000 f8d3 	bl	8007628 <__malloc_lock>
 8007482:	4a20      	ldr	r2, [pc, #128]	; (8007504 <_free_r+0x9c>)
 8007484:	9801      	ldr	r0, [sp, #4]
 8007486:	6813      	ldr	r3, [r2, #0]
 8007488:	4615      	mov	r5, r2
 800748a:	b933      	cbnz	r3, 800749a <_free_r+0x32>
 800748c:	6063      	str	r3, [r4, #4]
 800748e:	6014      	str	r4, [r2, #0]
 8007490:	b003      	add	sp, #12
 8007492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007496:	f000 b8cd 	b.w	8007634 <__malloc_unlock>
 800749a:	42a3      	cmp	r3, r4
 800749c:	d90b      	bls.n	80074b6 <_free_r+0x4e>
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	1862      	adds	r2, r4, r1
 80074a2:	4293      	cmp	r3, r2
 80074a4:	bf04      	itt	eq
 80074a6:	681a      	ldreq	r2, [r3, #0]
 80074a8:	685b      	ldreq	r3, [r3, #4]
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	bf04      	itt	eq
 80074ae:	1852      	addeq	r2, r2, r1
 80074b0:	6022      	streq	r2, [r4, #0]
 80074b2:	602c      	str	r4, [r5, #0]
 80074b4:	e7ec      	b.n	8007490 <_free_r+0x28>
 80074b6:	461a      	mov	r2, r3
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b10b      	cbz	r3, 80074c0 <_free_r+0x58>
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d9fa      	bls.n	80074b6 <_free_r+0x4e>
 80074c0:	6811      	ldr	r1, [r2, #0]
 80074c2:	1855      	adds	r5, r2, r1
 80074c4:	42a5      	cmp	r5, r4
 80074c6:	d10b      	bne.n	80074e0 <_free_r+0x78>
 80074c8:	6824      	ldr	r4, [r4, #0]
 80074ca:	4421      	add	r1, r4
 80074cc:	1854      	adds	r4, r2, r1
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	d1dd      	bne.n	8007490 <_free_r+0x28>
 80074d4:	681c      	ldr	r4, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	6053      	str	r3, [r2, #4]
 80074da:	4421      	add	r1, r4
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	e7d7      	b.n	8007490 <_free_r+0x28>
 80074e0:	d902      	bls.n	80074e8 <_free_r+0x80>
 80074e2:	230c      	movs	r3, #12
 80074e4:	6003      	str	r3, [r0, #0]
 80074e6:	e7d3      	b.n	8007490 <_free_r+0x28>
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1961      	adds	r1, r4, r5
 80074ec:	428b      	cmp	r3, r1
 80074ee:	bf04      	itt	eq
 80074f0:	6819      	ldreq	r1, [r3, #0]
 80074f2:	685b      	ldreq	r3, [r3, #4]
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	bf04      	itt	eq
 80074f8:	1949      	addeq	r1, r1, r5
 80074fa:	6021      	streq	r1, [r4, #0]
 80074fc:	6054      	str	r4, [r2, #4]
 80074fe:	e7c7      	b.n	8007490 <_free_r+0x28>
 8007500:	b003      	add	sp, #12
 8007502:	bd30      	pop	{r4, r5, pc}
 8007504:	20000194 	.word	0x20000194

08007508 <_malloc_r>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	1ccd      	adds	r5, r1, #3
 800750c:	f025 0503 	bic.w	r5, r5, #3
 8007510:	3508      	adds	r5, #8
 8007512:	2d0c      	cmp	r5, #12
 8007514:	bf38      	it	cc
 8007516:	250c      	movcc	r5, #12
 8007518:	2d00      	cmp	r5, #0
 800751a:	4606      	mov	r6, r0
 800751c:	db01      	blt.n	8007522 <_malloc_r+0x1a>
 800751e:	42a9      	cmp	r1, r5
 8007520:	d903      	bls.n	800752a <_malloc_r+0x22>
 8007522:	230c      	movs	r3, #12
 8007524:	6033      	str	r3, [r6, #0]
 8007526:	2000      	movs	r0, #0
 8007528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752a:	f000 f87d 	bl	8007628 <__malloc_lock>
 800752e:	4921      	ldr	r1, [pc, #132]	; (80075b4 <_malloc_r+0xac>)
 8007530:	680a      	ldr	r2, [r1, #0]
 8007532:	4614      	mov	r4, r2
 8007534:	b99c      	cbnz	r4, 800755e <_malloc_r+0x56>
 8007536:	4f20      	ldr	r7, [pc, #128]	; (80075b8 <_malloc_r+0xb0>)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	b923      	cbnz	r3, 8007546 <_malloc_r+0x3e>
 800753c:	4621      	mov	r1, r4
 800753e:	4630      	mov	r0, r6
 8007540:	f000 f862 	bl	8007608 <_sbrk_r>
 8007544:	6038      	str	r0, [r7, #0]
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	f000 f85d 	bl	8007608 <_sbrk_r>
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d123      	bne.n	800759a <_malloc_r+0x92>
 8007552:	230c      	movs	r3, #12
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	4630      	mov	r0, r6
 8007558:	f000 f86c 	bl	8007634 <__malloc_unlock>
 800755c:	e7e3      	b.n	8007526 <_malloc_r+0x1e>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	1b5b      	subs	r3, r3, r5
 8007562:	d417      	bmi.n	8007594 <_malloc_r+0x8c>
 8007564:	2b0b      	cmp	r3, #11
 8007566:	d903      	bls.n	8007570 <_malloc_r+0x68>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	441c      	add	r4, r3
 800756c:	6025      	str	r5, [r4, #0]
 800756e:	e004      	b.n	800757a <_malloc_r+0x72>
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	42a2      	cmp	r2, r4
 8007574:	bf0c      	ite	eq
 8007576:	600b      	streq	r3, [r1, #0]
 8007578:	6053      	strne	r3, [r2, #4]
 800757a:	4630      	mov	r0, r6
 800757c:	f000 f85a 	bl	8007634 <__malloc_unlock>
 8007580:	f104 000b 	add.w	r0, r4, #11
 8007584:	1d23      	adds	r3, r4, #4
 8007586:	f020 0007 	bic.w	r0, r0, #7
 800758a:	1ac2      	subs	r2, r0, r3
 800758c:	d0cc      	beq.n	8007528 <_malloc_r+0x20>
 800758e:	1a1b      	subs	r3, r3, r0
 8007590:	50a3      	str	r3, [r4, r2]
 8007592:	e7c9      	b.n	8007528 <_malloc_r+0x20>
 8007594:	4622      	mov	r2, r4
 8007596:	6864      	ldr	r4, [r4, #4]
 8007598:	e7cc      	b.n	8007534 <_malloc_r+0x2c>
 800759a:	1cc4      	adds	r4, r0, #3
 800759c:	f024 0403 	bic.w	r4, r4, #3
 80075a0:	42a0      	cmp	r0, r4
 80075a2:	d0e3      	beq.n	800756c <_malloc_r+0x64>
 80075a4:	1a21      	subs	r1, r4, r0
 80075a6:	4630      	mov	r0, r6
 80075a8:	f000 f82e 	bl	8007608 <_sbrk_r>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d1dd      	bne.n	800756c <_malloc_r+0x64>
 80075b0:	e7cf      	b.n	8007552 <_malloc_r+0x4a>
 80075b2:	bf00      	nop
 80075b4:	20000194 	.word	0x20000194
 80075b8:	20000198 	.word	0x20000198

080075bc <_realloc_r>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	4607      	mov	r7, r0
 80075c0:	4614      	mov	r4, r2
 80075c2:	460e      	mov	r6, r1
 80075c4:	b921      	cbnz	r1, 80075d0 <_realloc_r+0x14>
 80075c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075ca:	4611      	mov	r1, r2
 80075cc:	f7ff bf9c 	b.w	8007508 <_malloc_r>
 80075d0:	b922      	cbnz	r2, 80075dc <_realloc_r+0x20>
 80075d2:	f7ff ff49 	bl	8007468 <_free_r>
 80075d6:	4625      	mov	r5, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075dc:	f000 f830 	bl	8007640 <_malloc_usable_size_r>
 80075e0:	42a0      	cmp	r0, r4
 80075e2:	d20f      	bcs.n	8007604 <_realloc_r+0x48>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4638      	mov	r0, r7
 80075e8:	f7ff ff8e 	bl	8007508 <_malloc_r>
 80075ec:	4605      	mov	r5, r0
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d0f2      	beq.n	80075d8 <_realloc_r+0x1c>
 80075f2:	4631      	mov	r1, r6
 80075f4:	4622      	mov	r2, r4
 80075f6:	f7ff ff0f 	bl	8007418 <memcpy>
 80075fa:	4631      	mov	r1, r6
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7ff ff33 	bl	8007468 <_free_r>
 8007602:	e7e9      	b.n	80075d8 <_realloc_r+0x1c>
 8007604:	4635      	mov	r5, r6
 8007606:	e7e7      	b.n	80075d8 <_realloc_r+0x1c>

08007608 <_sbrk_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d06      	ldr	r5, [pc, #24]	; (8007624 <_sbrk_r+0x1c>)
 800760c:	2300      	movs	r3, #0
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7fb fab4 	bl	8002b80 <_sbrk>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d102      	bne.n	8007622 <_sbrk_r+0x1a>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b103      	cbz	r3, 8007622 <_sbrk_r+0x1a>
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	200003b0 	.word	0x200003b0

08007628 <__malloc_lock>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__malloc_lock+0x8>)
 800762a:	f000 b811 	b.w	8007650 <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	200003b8 	.word	0x200003b8

08007634 <__malloc_unlock>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__malloc_unlock+0x8>)
 8007636:	f000 b80c 	b.w	8007652 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	200003b8 	.word	0x200003b8

08007640 <_malloc_usable_size_r>:
 8007640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007644:	1f18      	subs	r0, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfbc      	itt	lt
 800764a:	580b      	ldrlt	r3, [r1, r0]
 800764c:	18c0      	addlt	r0, r0, r3
 800764e:	4770      	bx	lr

08007650 <__retarget_lock_acquire_recursive>:
 8007650:	4770      	bx	lr

08007652 <__retarget_lock_release_recursive>:
 8007652:	4770      	bx	lr

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
